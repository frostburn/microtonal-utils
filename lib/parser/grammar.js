// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }


const Fraction = require('fraction.js');
const Interval = require('../interval.js');
const {pyInterval, pyNote, pyRedDeg, baseNoteIntvToA} = require('../pythagorean.js');
const {fjsFactor, fjsSpec, nfjsSpec} = require('../fjs.js');
const {edoPy} = require('../edo.js');
const {ParseError, OtherError, defaultRefNote, evalExpr} = require('./eval.js');

var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": id},
    {"name": "top1", "symbols": ["_", "top2", "_"], "postprocess":  function (d) { let d1 = Object.assign({},d[1]); // copy this!
        d1.refNote = defaultRefNote;
        return d1; } },
    {"name": "top1$string$1", "symbols": [{"literal":"w"}, {"literal":"h"}, {"literal":"e"}, {"literal":"r"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "top1$ebnf$1", "symbols": ["hertz"], "postprocess": id},
    {"name": "top1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "top1", "symbols": ["_", "top2", "__", "top1$string$1", "__", "pyNote", "_", {"literal":"="}, "_", "decimal", "top1$ebnf$1", "_"], "postprocess":  function (d) { let d1 = Object.assign({},d[1]); // copy this!
        d1.refNote = {};
        d1.refNote.intvToA4 = evalExpr(d[5], defaultRefNote).val;
        d1.refNote.hertz    = Interval(d[9]);
        return d1; } },
    {"name": "top1$string$2", "symbols": [{"literal":"w"}, {"literal":"h"}, {"literal":"e"}, {"literal":"r"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "top1", "symbols": ["_", "top2", "__", "top1$string$2", "__", "pyNote", "_", {"literal":"="}, "_", "eqPyNote", "_", {"literal":"\\"}, "_", "posInt", "_"], "postprocess":  function (d) { let d1 = Object.assign({},d[1]); // copy this!
        const d5 = evalExpr(d[5], defaultRefNote).val;
        const d9 = d[9](d5);
        const d13 = parseInt(d[13]);
        d1.refNote = {};
        d1.refNote.intvToA4 = d9;
        d1.refNote.hertz    = Interval(2).pow(edoPy(d13,d9),d13).mul(440);
        return d1; } },
    {"name": "top2", "symbols": ["intvSExpr"], "postprocess": d => ({type: ["interval", "symbol"], expr: d[0][0], symbolType: d[0][1]})},
    {"name": "top2", "symbols": ["intvMExpr0"], "postprocess": d => ({type: ["interval", "multiplicative"], expr: d[0]})},
    {"name": "top2", "symbols": ["intvAExpr1"], "postprocess": d => ({type: ["interval", "additive"], expr: d[0]})},
    {"name": "top2", "symbols": ["noteSExpr"], "postprocess": d => ({type: ["note", "symbol"], expr: d[0][0], symbolType: d[0][1]})},
    {"name": "top2", "symbols": ["noteMExpr1"], "postprocess": d => ({type: ["note", "multiplicative"], expr: d[0]})},
    {"name": "top2", "symbols": ["noteAExpr1"], "postprocess": d => ({type: ["note", "additive"], expr: d[0]})},
    {"name": "top2", "symbols": ["edoName"], "postprocess": d => ({type: ["EDO", "name"], expr: d[0]})},
    {"name": "edoName$ebnf$1$subexpression$1", "symbols": [{"literal":"-"}, "_"]},
    {"name": "edoName$ebnf$1", "symbols": ["edoName$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "edoName$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "edoName$subexpression$1", "symbols": [/[eE]/, /[dD]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "edoName", "symbols": ["posInt", "_", "edoName$ebnf$1", "edoName$subexpression$1"], "postprocess": d => parseInt(d[0])},
    {"name": "eqPyNote", "symbols": ["pyNote"], "postprocess":  (d,loc,_) => function(ref) {
          let d0 = evalExpr(d[0], defaultRefNote).val;
          if (!ref || !ref.equals(d0)) {
            throw new ParseError("expected " + pyNote(ref), loc);
          }
          return d0;
        } },
    {"name": "intvMExpr0", "symbols": ["intvMExprIsoExpr"], "postprocess": (d,loc,_) => ["!isoExpr", d[0], loc]},
    {"name": "intvMExpr0", "symbols": ["intvMExpr1"], "postprocess": id},
    {"name": "intvMExprIsoExpr", "symbols": ["intvMExprIsoElt", "_", {"literal":":"}, "_", "intvMExprIsoElt"], "postprocess": d => [d[0], d[4]]},
    {"name": "intvMExprIsoExpr", "symbols": ["intvMExprIsoElt", "_", {"literal":":"}, "_", "intvMExprIsoExpr"], "postprocess": d => [d[0]].concat(d[4])},
    {"name": "intvMExprIsoElt", "symbols": ["intvMExpr1"], "postprocess": (d,loc,_) => [d[0], loc]},
    {"name": "intvMExprIsoElt", "symbols": [{"literal":"?"}], "postprocess": (d,loc,_) => [d[0], loc]},
    {"name": "intvMExprIsoElt", "symbols": [{"literal":"-"}], "postprocess": (d,loc,_) => [d[0], loc]},
    {"name": "intvMExpr1", "symbols": ["intvMExpr1", "_", {"literal":"*"}, "_", "intvMExpr2"], "postprocess": d => ["mul", d[0], d[4]]},
    {"name": "intvMExpr1", "symbols": ["intvMExpr1", "_", {"literal":"/"}, "_", "intvMExpr2"], "postprocess": d => ["div", d[0], d[4]]},
    {"name": "intvMExpr1", "symbols": ["noteMExpr1", "_", {"literal":"/"}, "_", "noteMExpr2"], "postprocess": d => ["div", d[0], d[4]]},
    {"name": "intvMExpr1", "symbols": ["intvMExpr2"], "postprocess": id},
    {"name": "intvMExpr2", "symbols": ["intvMExpr3", "_", {"literal":"^"}, "_", "frcExpr3"], "postprocess": d => ["pow", d[0], d[4]]},
    {"name": "intvMExpr2", "symbols": [{"literal":"("}, "_", "intvMExpr0", "_", {"literal":")"}, "_", "posIntSup"], "postprocess": d => ["pow", d[2], parseInt(d[6])]},
    {"name": "intvMExpr2$string$1", "symbols": [{"literal":"s"}, {"literal":"q"}, {"literal":"r"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2", "symbols": ["intvMExpr2$string$1", "_", {"literal":"("}, "_", "intvMExpr0", "_", {"literal":")"}], "postprocess": d => ["sqrt", d[4]]},
    {"name": "intvMExpr2$string$2", "symbols": [{"literal":"r"}, {"literal":"o"}, {"literal":"o"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2", "symbols": ["intvMExpr2$string$2", "posInt", "_", {"literal":"("}, "_", "intvMExpr0", "_", {"literal":")"}], "postprocess": d => ["root", d[5], parseInt(d[1])]},
    {"name": "intvMExpr2$string$3", "symbols": [{"literal":"m"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2", "symbols": ["intvMExpr2$string$3", "_", {"literal":"("}, "_", "intvMExpr0", "_", {"literal":","}, "_", "intvMExpr0", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!med", d[4], d[8], loc]},
    {"name": "intvMExpr2", "symbols": ["nmed", "_", {"literal":"("}, "_", "intvMExpr0", "_", {"literal":","}, "_", "intvMExpr0", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!nobleMed", d[4], d[8], d[0], loc]},
    {"name": "intvMExpr2$macrocall$2", "symbols": ["intvMExpr0"]},
    {"name": "intvMExpr2$macrocall$1$string$1", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["intvMExpr2$macrocall$1$string$1", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":")"}], "postprocess": d => ["red", d[4][0]]},
    {"name": "intvMExpr2$macrocall$1$string$2", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["intvMExpr2$macrocall$1$string$2", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":")"}], "postprocess": d => ["reb", d[4][0]]},
    {"name": "intvMExpr2$macrocall$1$string$3", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["intvMExpr2$macrocall$1$string$3", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":","}, "_", "intvMExpr0", "_", {"literal":")"}], "postprocess": d => ["red", d[4][0], d[8]]},
    {"name": "intvMExpr2$macrocall$1$string$4", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["intvMExpr2$macrocall$1$string$4", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":","}, "_", "intvMExpr0", "_", {"literal":")"}], "postprocess": d => ["reb", d[4][0], d[8]]},
    {"name": "intvMExpr2$macrocall$1$string$5", "symbols": [{"literal":"a"}, {"literal":"p"}, {"literal":"p"}, {"literal":"r"}, {"literal":"o"}, {"literal":"x"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["intvMExpr2$macrocall$1$string$5", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":","}, "_", "posInt", "_", {"literal":")"}], "postprocess": d => ["!edoApprox", d[4][0], parseInt(d[8])]},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["isoUp", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!isoUp1", d[4][0], d[0], loc]},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["isoDn", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!isoDown1", d[4][0], d[0], loc]},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["isoMid", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":")"}], "postprocess": d => ["isoMid", d[4][0], Interval(1)]},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["isoUp", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":","}, "_", "intvMExpr2$macrocall$2", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!isoUp2", d[8][0], d[4][0], d[0], loc]},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["isoDn", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":","}, "_", "intvMExpr2$macrocall$2", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!isoDown2", d[8][0], d[4][0], d[0], loc]},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["isoMid", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":","}, "_", "intvMExpr2$macrocall$2", "_", {"literal":")"}], "postprocess": d => ["isoMid", d[8][0], d[4][0]]},
    {"name": "intvMExpr2$macrocall$1$string$6", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["intvMExpr2$macrocall$1$string$6", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":","}, "_", "frcExpr1", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!iso", d[4][0], Interval(1), d[8], loc]},
    {"name": "intvMExpr2$macrocall$1$string$7", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2$macrocall$1", "symbols": ["intvMExpr2$macrocall$1$string$7", "_", {"literal":"("}, "_", "intvMExpr2$macrocall$2", "_", {"literal":","}, "_", "intvMExpr2$macrocall$2", "_", {"literal":","}, "_", "frcExpr1", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!iso", d[8][0], d[4][0], d[12], loc]},
    {"name": "intvMExpr2", "symbols": ["intvMExpr2$macrocall$1"], "postprocess": id},
    {"name": "intvMExpr2", "symbols": ["intvSymbol"], "postprocess": d => d[0][0]},
    {"name": "intvMExpr2", "symbols": ["intvMExpr3"], "postprocess": id},
    {"name": "intvMExpr3", "symbols": ["posInt"], "postprocess": d => Interval(d[0])},
    {"name": "intvMExpr3", "symbols": ["posInt", "_", "posIntSup"], "postprocess": d => Interval(Math.pow(parseInt(d[0]), parseInt(d[2])))},
    {"name": "intvMExpr3", "symbols": ["int", "_", {"literal":"\\"}, "_", "posInt"], "postprocess": d => ["!inEDO", parseInt(d[0]), parseInt(d[4])]},
    {"name": "intvMExpr3", "symbols": ["intvMEDOExpr3", "_", {"literal":"\\"}, "_", "posInt"], "postprocess": d => ["!inEDO", d[0], parseInt(d[4])]},
    {"name": "intvMExpr3", "symbols": [{"literal":"("}, "_", "intvMExpr0", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "isoUp$string$1", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}, {"literal":"u"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "isoUp", "symbols": ["isoUp$string$1"]},
    {"name": "isoUp$string$2", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}, {"literal":"U"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "isoUp", "symbols": ["isoUp$string$2"]},
    {"name": "isoDn$string$1", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}, {"literal":"d"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "isoDn", "symbols": ["isoDn$string$1"]},
    {"name": "isoDn$string$2", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}, {"literal":"D"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "isoDn", "symbols": ["isoDn$string$2"]},
    {"name": "isoDn$string$3", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}, {"literal":"D"}, {"literal":"o"}, {"literal":"w"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "isoDn", "symbols": ["isoDn$string$3"]},
    {"name": "isoMid$string$1", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}, {"literal":"m"}, {"literal":"i"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "isoMid", "symbols": ["isoMid$string$1"]},
    {"name": "isoMid$string$2", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}, {"literal":"M"}, {"literal":"i"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "isoMid", "symbols": ["isoMid$string$2"]},
    {"name": "nmed$string$1", "symbols": [{"literal":"n"}, {"literal":"m"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "nmed", "symbols": ["nmed$string$1"]},
    {"name": "nmed$string$2", "symbols": [{"literal":"n"}, {"literal":"M"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "nmed", "symbols": ["nmed$string$2"]},
    {"name": "nmed$string$3", "symbols": [{"literal":"n"}, {"literal":"o"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}, {"literal":"M"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "nmed", "symbols": ["nmed$string$3"]},
    {"name": "nmed$string$4", "symbols": [{"literal":"N"}, {"literal":"o"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}, {"literal":"M"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "nmed", "symbols": ["nmed$string$4"]},
    {"name": "noteMExpr1", "symbols": ["noteMExpr1", "_", {"literal":"*"}, "_", "intvMExpr2"], "postprocess": d => ["mul", d[0], d[4]]},
    {"name": "noteMExpr1", "symbols": ["intvMExpr1", "_", {"literal":"*"}, "_", "noteMExpr2"], "postprocess": d => ["mul", d[0], d[4]]},
    {"name": "noteMExpr1", "symbols": ["noteMExpr1", "_", {"literal":"/"}, "_", "intvMExpr2"], "postprocess": d => ["div", d[0], d[4]]},
    {"name": "noteMExpr1", "symbols": ["noteMExpr2"], "postprocess": id},
    {"name": "noteMExpr2$string$1", "symbols": [{"literal":"a"}, {"literal":"p"}, {"literal":"p"}, {"literal":"r"}, {"literal":"o"}, {"literal":"x"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "noteMExpr2", "symbols": ["noteMExpr2$string$1", "_", {"literal":"("}, "_", "noteMExpr1", "_", {"literal":","}, "_", "posInt", "_", {"literal":")"}], "postprocess": d => ["!edoApprox", d[4], parseInt(d[8])]},
    {"name": "noteMExpr2", "symbols": ["noteSymbol"], "postprocess": d => d[0][0]},
    {"name": "noteMExpr2", "symbols": ["noteMEDOExpr2", "_", {"literal":"\\"}, "_", "posInt"], "postprocess": d => ["!inEDO", d[0], parseInt(d[4])]},
    {"name": "noteMExpr2", "symbols": ["decExpr3", "hertz"], "postprocess": (d,loc,_) => ["!hertz", d[0], ["!refHertz"], loc]},
    {"name": "noteMExpr2", "symbols": [{"literal":"("}, "_", "noteMExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "intvAExpr1", "symbols": ["intvAExpr1", "_", {"literal":"+"}, "_", "intvAExpr2"], "postprocess": d => ["mul", d[0], d[4]]},
    {"name": "intvAExpr1", "symbols": ["intvAExpr1", "_", {"literal":"-"}, "_", "intvAExpr2"], "postprocess": d => ["div", d[0], d[4]]},
    {"name": "intvAExpr1", "symbols": ["noteAExpr1", "_", {"literal":"-"}, "_", "noteAExpr2"], "postprocess": d => ["div", d[0], d[4]]},
    {"name": "intvAExpr1", "symbols": ["intvAExpr2"], "postprocess": id},
    {"name": "intvAExpr2", "symbols": ["intvAExpr3", "_", {"literal":"x"}, "_", "frcExpr2"], "postprocess": d => ["pow", d[0], d[4]]},
    {"name": "intvAExpr2", "symbols": ["frcExpr2", "_", {"literal":"x"}, "_", "intvAExpr3"], "postprocess": d => ["pow", d[4], d[0]]},
    {"name": "intvAExpr2", "symbols": ["intvAExpr3"], "postprocess": id},
    {"name": "intvAExpr3$string$1", "symbols": [{"literal":"c"}, {"literal":"e"}, {"literal":"n"}, {"literal":"t"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3", "symbols": ["intvAExpr3$string$1", "_", {"literal":"("}, "_", "intvMExpr0", "_", {"literal":")"}], "postprocess": d => d[4]},
    {"name": "intvAExpr3$macrocall$2", "symbols": ["intvAExpr1"]},
    {"name": "intvAExpr3$macrocall$1$string$1", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["intvAExpr3$macrocall$1$string$1", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":")"}], "postprocess": d => ["red", d[4][0]]},
    {"name": "intvAExpr3$macrocall$1$string$2", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["intvAExpr3$macrocall$1$string$2", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":")"}], "postprocess": d => ["reb", d[4][0]]},
    {"name": "intvAExpr3$macrocall$1$string$3", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["intvAExpr3$macrocall$1$string$3", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":","}, "_", "intvMExpr0", "_", {"literal":")"}], "postprocess": d => ["red", d[4][0], d[8]]},
    {"name": "intvAExpr3$macrocall$1$string$4", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["intvAExpr3$macrocall$1$string$4", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":","}, "_", "intvMExpr0", "_", {"literal":")"}], "postprocess": d => ["reb", d[4][0], d[8]]},
    {"name": "intvAExpr3$macrocall$1$string$5", "symbols": [{"literal":"a"}, {"literal":"p"}, {"literal":"p"}, {"literal":"r"}, {"literal":"o"}, {"literal":"x"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["intvAExpr3$macrocall$1$string$5", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":","}, "_", "posInt", "_", {"literal":")"}], "postprocess": d => ["!edoApprox", d[4][0], parseInt(d[8])]},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["isoUp", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!isoUp1", d[4][0], d[0], loc]},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["isoDn", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!isoDown1", d[4][0], d[0], loc]},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["isoMid", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":")"}], "postprocess": d => ["isoMid", d[4][0], Interval(1)]},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["isoUp", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":","}, "_", "intvAExpr3$macrocall$2", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!isoUp2", d[8][0], d[4][0], d[0], loc]},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["isoDn", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":","}, "_", "intvAExpr3$macrocall$2", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!isoDown2", d[8][0], d[4][0], d[0], loc]},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["isoMid", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":","}, "_", "intvAExpr3$macrocall$2", "_", {"literal":")"}], "postprocess": d => ["isoMid", d[8][0], d[4][0]]},
    {"name": "intvAExpr3$macrocall$1$string$6", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["intvAExpr3$macrocall$1$string$6", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":","}, "_", "frcExpr1", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!iso", d[4][0], Interval(1), d[8], loc]},
    {"name": "intvAExpr3$macrocall$1$string$7", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3$macrocall$1", "symbols": ["intvAExpr3$macrocall$1$string$7", "_", {"literal":"("}, "_", "intvAExpr3$macrocall$2", "_", {"literal":","}, "_", "intvAExpr3$macrocall$2", "_", {"literal":","}, "_", "frcExpr1", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!iso", d[8][0], d[4][0], d[12], loc]},
    {"name": "intvAExpr3", "symbols": ["intvAExpr3$macrocall$1"], "postprocess": id},
    {"name": "intvAExpr3", "symbols": ["intvSymbol"], "postprocess": d => d[0][0]},
    {"name": "intvAExpr3", "symbols": ["intvAExpr4"], "postprocess": id},
    {"name": "intvAExpr4", "symbols": ["decExpr3", {"literal":"c"}], "postprocess": d => ["!cents", d[0]]},
    {"name": "intvAExpr4", "symbols": ["intvAEDOExpr3", "_", {"literal":"\\"}, "_", "posInt"], "postprocess": d => ["!inEDO", d[0], parseInt(d[4])]},
    {"name": "intvAExpr4", "symbols": [{"literal":"("}, "_", "intvAExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "noteAExpr1", "symbols": ["noteAExpr1", "_", {"literal":"+"}, "_", "intvAExpr2"], "postprocess": d => ["mul", d[0], d[4]]},
    {"name": "noteAExpr1", "symbols": ["intvAExpr1", "_", {"literal":"+"}, "_", "noteAExpr2"], "postprocess": d => ["mul", d[0], d[4]]},
    {"name": "noteAExpr1", "symbols": ["noteAExpr1", "_", {"literal":"-"}, "_", "intvAExpr2"], "postprocess": d => ["div", d[0], d[4]]},
    {"name": "noteAExpr1", "symbols": ["noteAExpr2"], "postprocess": id},
    {"name": "noteAExpr2$string$1", "symbols": [{"literal":"a"}, {"literal":"p"}, {"literal":"p"}, {"literal":"r"}, {"literal":"o"}, {"literal":"x"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "noteAExpr2", "symbols": ["noteAExpr2$string$1", "_", {"literal":"("}, "_", "noteAExpr1", "_", {"literal":","}, "_", "posInt", "_", {"literal":")"}], "postprocess": d => ["!edoApprox", d[4], parseInt(d[8])]},
    {"name": "noteAExpr2", "symbols": ["noteSymbol"], "postprocess": d => d[0][0]},
    {"name": "noteAExpr2", "symbols": ["noteAEDOExpr2", "_", {"literal":"\\"}, "_", "posInt"], "postprocess": d => ["!inEDO", d[0], parseInt(d[4])]},
    {"name": "noteAExpr2", "symbols": [{"literal":"("}, "_", "noteAExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "intvMEDOExpr1", "symbols": ["intvMEDOExpr1", "_", {"literal":"*"}, "_", "intvMEDOExpr2"], "postprocess": d => ["+", d[0], d[4]]},
    {"name": "intvMEDOExpr1", "symbols": ["intvMEDOExpr1", "_", {"literal":"/"}, "_", "intvMEDOExpr2"], "postprocess": d => ["-", d[0], d[4]]},
    {"name": "intvMEDOExpr1", "symbols": ["noteMEDOExpr1", "_", {"literal":"/"}, "_", "noteMEDOExpr2"], "postprocess": d => ["-", d[0], d[4]]},
    {"name": "intvMEDOExpr1", "symbols": ["intvMEDOExpr2"], "postprocess": id},
    {"name": "intvMEDOExpr2", "symbols": ["intvMEDOExpr3", "_", {"literal":"^"}, "_", "intExpr1"], "postprocess": d => ["*", d[0], d[4]]},
    {"name": "intvMEDOExpr2", "symbols": [{"literal":"("}, "_", "intvMEDOExpr1", "_", {"literal":")"}, "_", "posIntSup"], "postprocess": d => ["*", d[2], parseInt(d[6])]},
    {"name": "intvMEDOExpr2", "symbols": ["intvMEDOExpr3"], "postprocess": id},
    {"name": "intvMEDOExpr3", "symbols": ["upsDnsIntv"], "postprocess": id},
    {"name": "intvMEDOExpr3$string$1", "symbols": [{"literal":"T"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMEDOExpr3", "symbols": ["intvMEDOExpr3$string$1"], "postprocess": (d,loc,_) => ["!edoTT", loc]},
    {"name": "intvMEDOExpr3", "symbols": [{"literal":"("}, "_", "intvMEDOExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "noteMEDOExpr1", "symbols": ["noteMEDOExpr1", "_", {"literal":"*"}, "_", "intvMEDOExpr2"], "postprocess": d => ["+", d[0], d[4]]},
    {"name": "noteMEDOExpr1", "symbols": ["intvMEDOExpr1", "_", {"literal":"*"}, "_", "noteMEDOExpr2"], "postprocess": d => ["+", d[0], d[4]]},
    {"name": "noteMEDOExpr1", "symbols": ["noteMEDOExpr1", "_", {"literal":"/"}, "_", "intvMEDOExpr2"], "postprocess": d => ["-", d[0], d[4]]},
    {"name": "noteMEDOExpr1", "symbols": ["noteMEDOExpr2"], "postprocess": id},
    {"name": "noteMEDOExpr2", "symbols": ["upsDnsNote"], "postprocess": id},
    {"name": "noteMEDOExpr2", "symbols": [{"literal":"("}, "_", "noteMEDOExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "intvAEDOExpr1", "symbols": ["intvAEDOExpr1", "_", {"literal":"+"}, "_", "intvAEDOExpr2"], "postprocess": d => ["+", d[0], d[4]]},
    {"name": "intvAEDOExpr1", "symbols": ["intvAEDOExpr1", "_", {"literal":"-"}, "_", "intvAEDOExpr2"], "postprocess": d => ["-", d[0], d[4]]},
    {"name": "intvAEDOExpr1", "symbols": ["noteAEDOExpr1", "_", {"literal":"-"}, "_", "noteAEDOExpr2"], "postprocess": d => ["-", d[0], d[4]]},
    {"name": "intvAEDOExpr1", "symbols": ["intvAEDOExpr2"], "postprocess": id},
    {"name": "intvAEDOExpr2", "symbols": ["intvAEDOExpr3", "_", {"literal":"x"}, "_", "intExpr1"], "postprocess": d => ["*", d[0], d[4]]},
    {"name": "intvAEDOExpr2", "symbols": ["intExpr1", "_", {"literal":"x"}, "_", "intvAEDOExpr3"], "postprocess": d => ["*", d[0], d[4]]},
    {"name": "intvAEDOExpr2", "symbols": ["intvAEDOExpr3"], "postprocess": id},
    {"name": "intvAEDOExpr3", "symbols": [{"literal":"-"}, "_", "intvAEDOExpr4"], "postprocess": d => ["-", 0, d[2]]},
    {"name": "intvAEDOExpr3", "symbols": ["intvAEDOExpr4"], "postprocess": id},
    {"name": "intvAEDOExpr4", "symbols": ["nonNegInt"], "postprocess": d => parseInt(d[0])},
    {"name": "intvAEDOExpr4", "symbols": ["upsDnsIntv"], "postprocess": id},
    {"name": "intvAEDOExpr4$string$1", "symbols": [{"literal":"T"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAEDOExpr4", "symbols": ["intvAEDOExpr4$string$1"], "postprocess": d => ["!edoTT"]},
    {"name": "intvAEDOExpr4", "symbols": [{"literal":"("}, "_", "intvAEDOExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "noteAEDOExpr1", "symbols": ["noteAEDOExpr1", "_", {"literal":"+"}, "_", "intvAEDOExpr2"], "postprocess": d => ["+", d[0], d[4]]},
    {"name": "noteAEDOExpr1", "symbols": ["intvAEDOExpr1", "_", {"literal":"+"}, "_", "noteAEDOExpr2"], "postprocess": d => ["+", d[0], d[4]]},
    {"name": "noteAEDOExpr1", "symbols": ["noteAEDOExpr1", "_", {"literal":"-"}, "_", "intvAEDOExpr2"], "postprocess": d => ["-", d[0], d[4]]},
    {"name": "noteAEDOExpr1", "symbols": ["noteAEDOExpr2"], "postprocess": id},
    {"name": "noteAEDOExpr2", "symbols": ["upsDnsNote"], "postprocess": id},
    {"name": "noteAEDOExpr2", "symbols": [{"literal":"("}, "_", "noteAEDOExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "intvSExpr$macrocall$2", "symbols": ["intvSExpr0"]},
    {"name": "intvSExpr$macrocall$1$string$1", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSExpr$macrocall$1", "symbols": ["intvSExpr$macrocall$1$string$1", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":")"}], "postprocess": d => ["red", d[4][0]]},
    {"name": "intvSExpr$macrocall$1$string$2", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSExpr$macrocall$1", "symbols": ["intvSExpr$macrocall$1$string$2", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":")"}], "postprocess": d => ["reb", d[4][0]]},
    {"name": "intvSExpr$macrocall$1$string$3", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSExpr$macrocall$1", "symbols": ["intvSExpr$macrocall$1$string$3", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":","}, "_", "intvMExpr0", "_", {"literal":")"}], "postprocess": d => ["red", d[4][0], d[8]]},
    {"name": "intvSExpr$macrocall$1$string$4", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSExpr$macrocall$1", "symbols": ["intvSExpr$macrocall$1$string$4", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":","}, "_", "intvMExpr0", "_", {"literal":")"}], "postprocess": d => ["reb", d[4][0], d[8]]},
    {"name": "intvSExpr$macrocall$1$string$5", "symbols": [{"literal":"a"}, {"literal":"p"}, {"literal":"p"}, {"literal":"r"}, {"literal":"o"}, {"literal":"x"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSExpr$macrocall$1", "symbols": ["intvSExpr$macrocall$1$string$5", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":","}, "_", "posInt", "_", {"literal":")"}], "postprocess": d => ["!edoApprox", d[4][0], parseInt(d[8])]},
    {"name": "intvSExpr$macrocall$1", "symbols": ["isoUp", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!isoUp1", d[4][0], d[0], loc]},
    {"name": "intvSExpr$macrocall$1", "symbols": ["isoDn", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!isoDown1", d[4][0], d[0], loc]},
    {"name": "intvSExpr$macrocall$1", "symbols": ["isoMid", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":")"}], "postprocess": d => ["isoMid", d[4][0], Interval(1)]},
    {"name": "intvSExpr$macrocall$1", "symbols": ["isoUp", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":","}, "_", "intvSExpr$macrocall$2", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!isoUp2", d[8][0], d[4][0], d[0], loc]},
    {"name": "intvSExpr$macrocall$1", "symbols": ["isoDn", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":","}, "_", "intvSExpr$macrocall$2", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!isoDown2", d[8][0], d[4][0], d[0], loc]},
    {"name": "intvSExpr$macrocall$1", "symbols": ["isoMid", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":","}, "_", "intvSExpr$macrocall$2", "_", {"literal":")"}], "postprocess": d => ["isoMid", d[8][0], d[4][0]]},
    {"name": "intvSExpr$macrocall$1$string$6", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSExpr$macrocall$1", "symbols": ["intvSExpr$macrocall$1$string$6", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":","}, "_", "frcExpr1", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!iso", d[4][0], Interval(1), d[8], loc]},
    {"name": "intvSExpr$macrocall$1$string$7", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSExpr$macrocall$1", "symbols": ["intvSExpr$macrocall$1$string$7", "_", {"literal":"("}, "_", "intvSExpr$macrocall$2", "_", {"literal":","}, "_", "intvSExpr$macrocall$2", "_", {"literal":","}, "_", "frcExpr1", "_", {"literal":")"}], "postprocess": (d,loc,_) => ["!iso", d[8][0], d[4][0], d[12], loc]},
    {"name": "intvSExpr", "symbols": ["intvSExpr$macrocall$1"], "postprocess": d => [d[0], "function call"]},
    {"name": "intvSExpr", "symbols": ["intvSymbol"], "postprocess": id},
    {"name": "intvSExpr", "symbols": ["intvEDOSymb"], "postprocess": id},
    {"name": "intvSExpr", "symbols": ["posInt", "_", {"literal":"/"}, "_", "posInt"], "postprocess": d => [Interval(d[0],d[4]), "ratio"]},
    {"name": "intvSExpr", "symbols": ["decExpr3", {"literal":"c"}], "postprocess": d => [["!cents", d[0]], "cents"]},
    {"name": "intvSExpr", "symbols": [{"literal":"("}, "_", "intvSExpr", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "intvSExpr0", "symbols": ["intvSExpr"], "postprocess": d => d[0][0]},
    {"name": "intvEDOSymb", "symbols": ["int", "_", {"literal":"\\"}, "_", "posInt"], "postprocess": d => [["!inEDO", parseInt(d[0]), parseInt(d[4])], "EDO step"]},
    {"name": "intvEDOSymb", "symbols": ["upsDnsIntvAbD", "_", {"literal":"\\"}, "_", "posInt"], "postprocess": d => [["!inEDO", d[0], parseInt(d[4])], "ups-and-downs"]},
    {"name": "intvEDOSymb", "symbols": ["upsDnsIntvVbD", "_", {"literal":"\\"}, "_", "posInt"], "postprocess": d => [["!inEDO", d[0], parseInt(d[4])], "ups-and-downs (verbose)"]},
    {"name": "intvEDOSymb$string$1", "symbols": [{"literal":"T"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvEDOSymb", "symbols": ["intvEDOSymb$string$1", "_", {"literal":"\\"}, "_", "posInt"], "postprocess": d => [["!inEDO", ["!edoTT"], parseInt(d[4])], "EDO TT"]},
    {"name": "noteSExpr$string$1", "symbols": [{"literal":"a"}, {"literal":"p"}, {"literal":"p"}, {"literal":"r"}, {"literal":"o"}, {"literal":"x"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "noteSExpr", "symbols": ["noteSExpr$string$1", "_", {"literal":"("}, "_", "noteSExpr", "_", {"literal":","}, "_", "posInt", "_", {"literal":")"}], "postprocess": d => [["!edoApprox", d[4][0], parseInt(d[8])], "function call"]},
    {"name": "noteSExpr", "symbols": ["noteSymbol"], "postprocess": id},
    {"name": "noteSExpr", "symbols": ["upsDnsNote", "_", {"literal":"\\"}, "_", "posInt"], "postprocess": d => [["!inEDO", d[0], parseInt(d[4])], "ups-and-downs"]},
    {"name": "noteSExpr", "symbols": ["decExpr3", "hertz"], "postprocess": (d,loc,_) => [["!hertz", d[0], ["!refHertz"], loc], "hertz"]},
    {"name": "noteSExpr", "symbols": [{"literal":"("}, "_", "noteSExpr", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "intvSymbol", "symbols": ["pyIntvD"], "postprocess": d => [d[0], "Pythagorean"]},
    {"name": "intvSymbol", "symbols": ["npyIntvD"], "postprocess": d => [d[0], "neutral Pythagorean"]},
    {"name": "intvSymbol", "symbols": ["snpyIntvD"], "postprocess": d => [d[0], "semi-neutral Pythagorean"]},
    {"name": "intvSymbol", "symbols": ["pyIntvVbD"], "postprocess": d => [d[0], "Pythagorean (verbose)"]},
    {"name": "intvSymbol", "symbols": ["npyIntvVbD"], "postprocess": d => [d[0], "neutral Pythagorean (verbose)"]},
    {"name": "intvSymbol", "symbols": ["snpyIntvVbD"], "postprocess": d => [d[0], "semi-neutral Pythagorean (verbose)"]},
    {"name": "intvSymbol", "symbols": ["strictFJSLikeIntv"], "postprocess": d => [d[0], "FJS-like"]},
    {"name": "intvSymbol$string$1", "symbols": [{"literal":"F"}, {"literal":"J"}, {"literal":"S"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSymbol", "symbols": ["intvSymbol$string$1", "_", {"literal":"("}, "_", "fjsIntv", "_", {"literal":")"}], "postprocess": d => [d[4], "NFJS"]},
    {"name": "intvSymbol$string$2", "symbols": [{"literal":"N"}, {"literal":"F"}, {"literal":"J"}, {"literal":"S"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSymbol", "symbols": ["intvSymbol$string$2", "_", {"literal":"("}, "_", "nfjsIntv", "_", {"literal":")"}], "postprocess": d => [d[4], "FJS"]},
    {"name": "intvSymbol", "symbols": ["aclrIntv"], "postprocess": d => [d[0], "color"]},
    {"name": "intvSymbol", "symbols": ["clrIntv"], "postprocess": d => [d[0], "color (verbose)"]},
    {"name": "intvSymbol", "symbols": ["monzo"], "postprocess": d => [d[0], "monzo"]},
    {"name": "intvSymbol$string$3", "symbols": [{"literal":"T"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSymbol", "symbols": ["intvSymbol$string$3"], "postprocess": _ => [Interval(2).sqrt(), "TT"]},
    {"name": "intvSymbol", "symbols": ["phi"], "postprocess": _ => [Interval.phi, "phi"]},
    {"name": "phi$string$1", "symbols": [{"literal":"p"}, {"literal":"h"}, {"literal":"i"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "phi", "symbols": ["phi$string$1"]},
    {"name": "phi", "symbols": [{"literal":"φ"}]},
    {"name": "phi", "symbols": [{"literal":"ϕ"}]},
    {"name": "noteSymbol", "symbols": ["pyNote"], "postprocess": d => [d[0], "Pythagorean"]},
    {"name": "noteSymbol", "symbols": ["npyNote"], "postprocess": d => [d[0], "neutral Pythagorean"]},
    {"name": "noteSymbol", "symbols": ["strictFJSLikeNote"], "postprocess": d => [d[0], "FJS-like"]},
    {"name": "noteSymbol$string$1", "symbols": [{"literal":"F"}, {"literal":"J"}, {"literal":"S"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "noteSymbol", "symbols": ["noteSymbol$string$1", "_", {"literal":"("}, "_", "fjsNote", "_", {"literal":")"}], "postprocess": d => [d[4], "NFJS"]},
    {"name": "noteSymbol$string$2", "symbols": [{"literal":"N"}, {"literal":"F"}, {"literal":"J"}, {"literal":"S"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "noteSymbol", "symbols": ["noteSymbol$string$2", "_", {"literal":"("}, "_", "nfjsNote", "_", {"literal":")"}], "postprocess": d => [d[4], "FJS"]},
    {"name": "noteSymbol", "symbols": ["aclrNote"], "postprocess": d => [d[0], "color"]},
    {"name": "noteSymbol", "symbols": ["clrNote"], "postprocess": d => [d[0], "color (verbose)"]},
    {"name": "monzo", "symbols": [/[\[\|]/, "_", "monzoElts", /[\]>⟩]/], "postprocess": d => Interval(d[2])},
    {"name": "monzoElts", "symbols": [], "postprocess": d => []},
    {"name": "monzoElts", "symbols": ["frcExpr2"], "postprocess": d => [d[0]]},
    {"name": "monzoElts", "symbols": ["frcExpr2", "_", {"literal":","}, "_", "monzoElts"], "postprocess": d => [d[0]].concat(d[4])},
    {"name": "monzoElts", "symbols": ["frcExpr2", "__", "monzoElts"], "postprocess": d => [d[0]].concat(d[2])},
    {"name": "anyPyIntv", "symbols": ["pyIntvD"], "postprocess": id},
    {"name": "anyPyIntv", "symbols": ["npyIntvD"], "postprocess": id},
    {"name": "anyPyIntv", "symbols": ["snpyIntvD"], "postprocess": id},
    {"name": "anyPyIntv", "symbols": ["pyIntvVbD"], "postprocess": id},
    {"name": "anyPyIntv", "symbols": ["npyIntvVbD"], "postprocess": id},
    {"name": "anyPyIntv", "symbols": ["snpyIntvVbD"], "postprocess": id},
    {"name": "pyIntvD", "symbols": ["pyIntv"], "postprocess": id},
    {"name": "pyIntvD", "symbols": ["desc", "pyIntv"], "postprocess": d => ["recip", d[1]]},
    {"name": "npyIntvD", "symbols": ["npyIntv"], "postprocess": id},
    {"name": "npyIntvD", "symbols": ["desc", "npyIntv"], "postprocess": d => ["recip", d[1]]},
    {"name": "snpyIntvD", "symbols": ["snpyIntv"], "postprocess": id},
    {"name": "snpyIntvD", "symbols": ["desc", "snpyIntv"], "postprocess": d => ["recip", d[1]]},
    {"name": "pyIntv", "symbols": [{"literal":"P"}, "degV0"], "postprocess": (d,loc,_) => ["!perfPyIntv", d[1], loc]},
    {"name": "pyIntv", "symbols": [{"literal":"M"}, "degV0"], "postprocess": (d,loc,_) => ["!nonPerfPyIntv", d[1], Fraction(1,2), "M", loc]},
    {"name": "pyIntv", "symbols": [{"literal":"m"}, "degV0"], "postprocess": (d,loc,_) => ["!nonPerfPyIntv", d[1], Fraction(-1,2), "m", loc]},
    {"name": "pyIntv$ebnf$1", "symbols": [{"literal":"A"}]},
    {"name": "pyIntv$ebnf$1", "symbols": ["pyIntv$ebnf$1", {"literal":"A"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyIntv", "symbols": ["pyIntv$ebnf$1", "degV0"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[1], d[0].length, 1, loc]},
    {"name": "pyIntv$ebnf$2", "symbols": [{"literal":"d"}]},
    {"name": "pyIntv$ebnf$2", "symbols": ["pyIntv$ebnf$2", {"literal":"d"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyIntv", "symbols": ["pyIntv$ebnf$2", "degV0"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[1], -d[0].length, 1, loc]},
    {"name": "pyIntv", "symbols": ["posInt", {"literal":"A"}, "degV0"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[2], parseInt(d[0]), 1, loc]},
    {"name": "pyIntv", "symbols": ["posInt", {"literal":"d"}, "degV0"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[2], -parseInt(d[0]), 1, loc]},
    {"name": "npyIntv$subexpression$1", "symbols": [/[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "npyIntv", "symbols": ["npyIntv$subexpression$1", "degV0"], "postprocess": (d,loc,_) => ["!nonPerfPyIntv", d[1], 0, "n", loc]},
    {"name": "npyIntv$string$1", "symbols": [{"literal":"s"}, {"literal":"A"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyIntv", "symbols": ["npyIntv$string$1", "degV0"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[1], 1, 2, loc]},
    {"name": "npyIntv$string$2", "symbols": [{"literal":"s"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyIntv", "symbols": ["npyIntv$string$2", "degV0"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[1], -1, 2, loc]},
    {"name": "npyIntv$string$3", "symbols": [{"literal":"/"}, {"literal":"2"}, {"literal":"-"}, {"literal":"A"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyIntv", "symbols": ["posInt", "npyIntv$string$3", "degV0"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[2], parseInt(d[0]), 2, loc]},
    {"name": "npyIntv$string$4", "symbols": [{"literal":"/"}, {"literal":"2"}, {"literal":"-"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyIntv", "symbols": ["posInt", "npyIntv$string$4", "degV0"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[2], -parseInt(d[0]), 2, loc]},
    {"name": "snpyIntv$string$1", "symbols": [{"literal":"s"}, {"literal":"M"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "snpyIntv", "symbols": ["snpyIntv$string$1", "degV0"], "postprocess": (d,loc,_) => ["!nonPerfPyIntv", d[1], Fraction(1,4), "sM", loc]},
    {"name": "snpyIntv$string$2", "symbols": [{"literal":"s"}, {"literal":"m"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "snpyIntv", "symbols": ["snpyIntv$string$2", "degV0"], "postprocess": (d,loc,_) => ["!nonPerfPyIntv", d[1], Fraction(-1,4), "sm", loc]},
    {"name": "snpyIntv$string$3", "symbols": [{"literal":"/"}, {"literal":"4"}, {"literal":"-"}, {"literal":"A"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "snpyIntv", "symbols": ["posInt", "snpyIntv$string$3", "degV0"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[2], parseInt(d[0]), 4, loc]},
    {"name": "snpyIntv$string$4", "symbols": [{"literal":"/"}, {"literal":"4"}, {"literal":"-"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "snpyIntv", "symbols": ["posInt", "snpyIntv$string$4", "degV0"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[2], -parseInt(d[0]), 4, loc]},
    {"name": "pyIntvVbD", "symbols": ["pyIntvVb"], "postprocess": id},
    {"name": "pyIntvVbD", "symbols": ["desc", "pyIntvVb"], "postprocess": d => ["recip", d[1]]},
    {"name": "npyIntvVbD", "symbols": ["npyIntvVb"], "postprocess": id},
    {"name": "npyIntvVbD", "symbols": ["desc", "npyIntvVb"], "postprocess": d => ["recip", d[1]]},
    {"name": "snpyIntvVbD", "symbols": ["snpyIntvVb"], "postprocess": id},
    {"name": "snpyIntvVbD", "symbols": ["desc", "snpyIntvVb"], "postprocess": d => ["recip", d[1]]},
    {"name": "pyIntvVb", "symbols": ["pyPrf", "degV1"], "postprocess": (d,loc,_) => ["!perfPyIntv", d[1], loc]},
    {"name": "pyIntvVb", "symbols": ["pyMaj", "degV1"], "postprocess": (d,loc,_) => ["!nonPerfPyIntv", d[1], Fraction(1,2), "M", loc]},
    {"name": "pyIntvVb", "symbols": ["pyMin", "degV1"], "postprocess": (d,loc,_) => ["!nonPerfPyIntv", d[1], Fraction(-1,2), "m", loc]},
    {"name": "pyIntvVb", "symbols": ["pyAug", "degV1"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[1], 1, 1, loc]},
    {"name": "pyIntvVb", "symbols": ["pyDim", "degV1"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[1], -1, 1, loc]},
    {"name": "pyIntvVb", "symbols": ["posInt", {"literal":"-"}, "pyAug", "degV1"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[3], parseInt(d[0]), 1, loc]},
    {"name": "pyIntvVb", "symbols": ["posInt", {"literal":"-"}, "pyDim", "degV1"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[3], -parseInt(d[0]), 1, loc]},
    {"name": "npyIntvVb", "symbols": ["pyNeut", "degV1"], "postprocess": (d,loc,_) => ["!nonPerfPyIntv", d[1], 0, "n", loc]},
    {"name": "npyIntvVb", "symbols": ["pySemi", "pyAug", "degV1"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[2], 1, 2, loc]},
    {"name": "npyIntvVb", "symbols": ["pySemi", "pyDim", "degV1"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[2], -1, 2, loc]},
    {"name": "npyIntvVb$string$1", "symbols": [{"literal":"/"}, {"literal":"2"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyIntvVb", "symbols": ["posInt", "npyIntvVb$string$1", "pyAug", "degV1"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[3], parseInt(d[0]), 2, loc]},
    {"name": "npyIntvVb$string$2", "symbols": [{"literal":"/"}, {"literal":"2"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyIntvVb", "symbols": ["posInt", "npyIntvVb$string$2", "pyDim", "degV1"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[3], -parseInt(d[0]), 2, loc]},
    {"name": "snpyIntvVb", "symbols": ["pySemi", "pyMaj", "degV1"], "postprocess": (d,loc,_) => ["!nonPerfPyIntv", d[2], Fraction(1,4), "sM", loc]},
    {"name": "snpyIntvVb", "symbols": ["pySemi", "pyMin", "degV1"], "postprocess": (d,loc,_) => ["!nonPerfPyIntv", d[2], Fraction(-1,4), "sm", loc]},
    {"name": "snpyIntvVb$string$1", "symbols": [{"literal":"/"}, {"literal":"4"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "snpyIntvVb", "symbols": ["posInt", "snpyIntvVb$string$1", "pyAug", "degV1"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[2], parseInt(d[0]), 4, loc]},
    {"name": "snpyIntvVb$string$2", "symbols": [{"literal":"/"}, {"literal":"4"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "snpyIntvVb", "symbols": ["posInt", "snpyIntvVb$string$2", "pyDim", "degV1"], "postprocess": (d,loc,_) => ["!augOrDimPyIntv", d[2], -parseInt(d[0]), 4, loc]},
    {"name": "pyPrf$subexpression$1", "symbols": [/[pP]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "pyPrf$string$1", "symbols": [{"literal":"e"}, {"literal":"r"}, {"literal":"f"}, {"literal":"e"}, {"literal":"c"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyPrf", "symbols": ["pyPrf$subexpression$1", "pyPrf$string$1"]},
    {"name": "pyMaj$subexpression$1", "symbols": [/[mM]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "pyMaj$string$1", "symbols": [{"literal":"a"}, {"literal":"j"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyMaj$ebnf$1$string$1", "symbols": [{"literal":"o"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyMaj$ebnf$1", "symbols": ["pyMaj$ebnf$1$string$1"], "postprocess": id},
    {"name": "pyMaj$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "pyMaj", "symbols": ["pyMaj$subexpression$1", "pyMaj$string$1", "pyMaj$ebnf$1"]},
    {"name": "pyMin$subexpression$1", "symbols": [/[mM]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "pyMin$string$1", "symbols": [{"literal":"i"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyMin$ebnf$1$string$1", "symbols": [{"literal":"o"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyMin$ebnf$1", "symbols": ["pyMin$ebnf$1$string$1"], "postprocess": id},
    {"name": "pyMin$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "pyMin", "symbols": ["pyMin$subexpression$1", "pyMin$string$1", "pyMin$ebnf$1"]},
    {"name": "pyAug$subexpression$1", "symbols": [/[aA]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "pyAug$string$1", "symbols": [{"literal":"u"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyAug$ebnf$1$string$1", "symbols": [{"literal":"m"}, {"literal":"e"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyAug$ebnf$1", "symbols": ["pyAug$ebnf$1$string$1"], "postprocess": id},
    {"name": "pyAug$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "pyAug", "symbols": ["pyAug$subexpression$1", "pyAug$string$1", "pyAug$ebnf$1"]},
    {"name": "pyDim$subexpression$1", "symbols": [/[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "pyDim$string$1", "symbols": [{"literal":"i"}, {"literal":"m"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyDim$ebnf$1$string$1", "symbols": [{"literal":"i"}, {"literal":"n"}, {"literal":"i"}, {"literal":"s"}, {"literal":"h"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyDim$ebnf$1", "symbols": ["pyDim$ebnf$1$string$1"], "postprocess": id},
    {"name": "pyDim$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "pyDim", "symbols": ["pyDim$subexpression$1", "pyDim$string$1", "pyDim$ebnf$1"]},
    {"name": "pyNeut$subexpression$1", "symbols": [/[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "pyNeut$string$1", "symbols": [{"literal":"e"}, {"literal":"u"}, {"literal":"t"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyNeut", "symbols": ["pyNeut$subexpression$1", "pyNeut$string$1"]},
    {"name": "pySemi$subexpression$1", "symbols": [/[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "pySemi$string$1", "symbols": [{"literal":"e"}, {"literal":"m"}, {"literal":"i"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pySemi", "symbols": ["pySemi$subexpression$1", "pySemi$string$1"]},
    {"name": "anyPyNote", "symbols": ["pyNote"], "postprocess": id},
    {"name": "anyPyNote", "symbols": ["npyNote"], "postprocess": id},
    {"name": "pyNote", "symbols": [{"literal":"A"}], "postprocess": _ => ["recip", ["!refIntvToA4"]]},
    {"name": "pyNote$macrocall$2", "symbols": [/[B-G]/]},
    {"name": "pyNote$macrocall$3", "symbols": ["pyNoteNoAccs"]},
    {"name": "pyNote$macrocall$1$ebnf$1", "symbols": ["int"], "postprocess": id},
    {"name": "pyNote$macrocall$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "pyNote$macrocall$1", "symbols": ["pyNote$macrocall$2", "pyNote$macrocall$3", "pyNote$macrocall$1$ebnf$1"], "postprocess":  function(d) {
        const d2 = d[2] ? parseInt(d[2]) : 4;
        return ["mul", ["div", baseNoteIntvToA(d[0][0]), ["!refIntvToA4"]]
                     , d[1][0].mul(Interval(2).pow(d2 - 4))]; } },
    {"name": "pyNote", "symbols": ["pyNote$macrocall$1"], "postprocess": id},
    {"name": "pyNote$macrocall$5", "symbols": [/[A-G]/]},
    {"name": "pyNote$macrocall$6", "symbols": ["pyNoteAccs"]},
    {"name": "pyNote$macrocall$4$ebnf$1", "symbols": ["int"], "postprocess": id},
    {"name": "pyNote$macrocall$4$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "pyNote$macrocall$4", "symbols": ["pyNote$macrocall$5", "pyNote$macrocall$6", "pyNote$macrocall$4$ebnf$1"], "postprocess":  function(d) {
        const d2 = d[2] ? parseInt(d[2]) : 4;
        return ["mul", ["div", baseNoteIntvToA(d[0][0]), ["!refIntvToA4"]]
                     , d[1][0].mul(Interval(2).pow(d2 - 4))]; } },
    {"name": "pyNote", "symbols": ["pyNote$macrocall$4"], "postprocess": id},
    {"name": "pyNoteNoAccs", "symbols": [], "postprocess": _ => Interval(1)},
    {"name": "pyNoteAccs$subexpression$1", "symbols": [{"literal":"♮"}]},
    {"name": "pyNoteAccs$subexpression$1$string$1", "symbols": [{"literal":"n"}, {"literal":"a"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyNoteAccs$subexpression$1", "symbols": ["pyNoteAccs$subexpression$1$string$1"]},
    {"name": "pyNoteAccs", "symbols": ["pyNoteAccs$subexpression$1"], "postprocess": _ => Interval(1)},
    {"name": "pyNoteAccs$ebnf$1$subexpression$1", "symbols": [{"literal":"♯"}]},
    {"name": "pyNoteAccs$ebnf$1$subexpression$1", "symbols": [{"literal":"#"}]},
    {"name": "pyNoteAccs$ebnf$1", "symbols": ["pyNoteAccs$ebnf$1$subexpression$1"]},
    {"name": "pyNoteAccs$ebnf$1$subexpression$2", "symbols": [{"literal":"♯"}]},
    {"name": "pyNoteAccs$ebnf$1$subexpression$2", "symbols": [{"literal":"#"}]},
    {"name": "pyNoteAccs$ebnf$1", "symbols": ["pyNoteAccs$ebnf$1", "pyNoteAccs$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyNoteAccs", "symbols": ["pyNoteAccs$ebnf$1"], "postprocess": d => pyInterval(1, d[0].length)},
    {"name": "pyNoteAccs$ebnf$2$subexpression$1$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd2a"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyNoteAccs$ebnf$2$subexpression$1", "symbols": ["pyNoteAccs$ebnf$2$subexpression$1$string$1"]},
    {"name": "pyNoteAccs$ebnf$2$subexpression$1", "symbols": [{"literal":"X"}]},
    {"name": "pyNoteAccs$ebnf$2", "symbols": ["pyNoteAccs$ebnf$2$subexpression$1"]},
    {"name": "pyNoteAccs$ebnf$2$subexpression$2$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd2a"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyNoteAccs$ebnf$2$subexpression$2", "symbols": ["pyNoteAccs$ebnf$2$subexpression$2$string$1"]},
    {"name": "pyNoteAccs$ebnf$2$subexpression$2", "symbols": [{"literal":"X"}]},
    {"name": "pyNoteAccs$ebnf$2", "symbols": ["pyNoteAccs$ebnf$2", "pyNoteAccs$ebnf$2$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyNoteAccs$ebnf$3", "symbols": []},
    {"name": "pyNoteAccs$ebnf$3$subexpression$1", "symbols": [{"literal":"♯"}]},
    {"name": "pyNoteAccs$ebnf$3$subexpression$1", "symbols": [{"literal":"#"}]},
    {"name": "pyNoteAccs$ebnf$3", "symbols": ["pyNoteAccs$ebnf$3", "pyNoteAccs$ebnf$3$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyNoteAccs", "symbols": ["pyNoteAccs$ebnf$2", "pyNoteAccs$ebnf$3"], "postprocess": d => pyInterval(1, 2*d[0].length + d[1].length)},
    {"name": "pyNoteAccs$ebnf$4$subexpression$1", "symbols": [{"literal":"♭"}]},
    {"name": "pyNoteAccs$ebnf$4$subexpression$1", "symbols": [{"literal":"b"}]},
    {"name": "pyNoteAccs$ebnf$4", "symbols": ["pyNoteAccs$ebnf$4$subexpression$1"]},
    {"name": "pyNoteAccs$ebnf$4$subexpression$2", "symbols": [{"literal":"♭"}]},
    {"name": "pyNoteAccs$ebnf$4$subexpression$2", "symbols": [{"literal":"b"}]},
    {"name": "pyNoteAccs$ebnf$4", "symbols": ["pyNoteAccs$ebnf$4", "pyNoteAccs$ebnf$4$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyNoteAccs", "symbols": ["pyNoteAccs$ebnf$4"], "postprocess": d => pyInterval(-1, d[0].length)},
    {"name": "pyNoteAccs$ebnf$5", "symbols": []},
    {"name": "pyNoteAccs$ebnf$5$subexpression$1", "symbols": [{"literal":"♭"}]},
    {"name": "pyNoteAccs$ebnf$5$subexpression$1", "symbols": [{"literal":"b"}]},
    {"name": "pyNoteAccs$ebnf$5", "symbols": ["pyNoteAccs$ebnf$5", "pyNoteAccs$ebnf$5$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyNoteAccs$ebnf$6$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd2b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyNoteAccs$ebnf$6", "symbols": ["pyNoteAccs$ebnf$6$string$1"]},
    {"name": "pyNoteAccs$ebnf$6$string$2", "symbols": [{"literal":"\ud834"}, {"literal":"\udd2b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyNoteAccs$ebnf$6", "symbols": ["pyNoteAccs$ebnf$6", "pyNoteAccs$ebnf$6$string$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyNoteAccs", "symbols": ["pyNoteAccs$ebnf$5", "pyNoteAccs$ebnf$6"], "postprocess": d => pyInterval(-1, 2*d[0].length + d[1].length)},
    {"name": "npyNote$macrocall$2", "symbols": [/[A-G]/]},
    {"name": "npyNote$macrocall$3", "symbols": ["npyNoteAccs"]},
    {"name": "npyNote$macrocall$1$ebnf$1", "symbols": ["int"], "postprocess": id},
    {"name": "npyNote$macrocall$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "npyNote$macrocall$1", "symbols": ["npyNote$macrocall$2", "npyNote$macrocall$3", "npyNote$macrocall$1$ebnf$1"], "postprocess":  function(d) {
        const d2 = d[2] ? parseInt(d[2]) : 4;
        return ["mul", ["div", baseNoteIntvToA(d[0][0]), ["!refIntvToA4"]]
                     , d[1][0].mul(Interval(2).pow(d2 - 4))]; } },
    {"name": "npyNote", "symbols": ["npyNote$macrocall$1"], "postprocess": id},
    {"name": "npyNoteAccs$ebnf$1", "symbols": []},
    {"name": "npyNoteAccs$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd2a"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyNoteAccs$ebnf$1$subexpression$1", "symbols": ["npyNoteAccs$ebnf$1$subexpression$1$string$1"]},
    {"name": "npyNoteAccs$ebnf$1$subexpression$1", "symbols": [{"literal":"X"}]},
    {"name": "npyNoteAccs$ebnf$1", "symbols": ["npyNoteAccs$ebnf$1", "npyNoteAccs$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "npyNoteAccs$ebnf$2", "symbols": []},
    {"name": "npyNoteAccs$ebnf$2$subexpression$1", "symbols": [{"literal":"♯"}]},
    {"name": "npyNoteAccs$ebnf$2$subexpression$1", "symbols": [{"literal":"#"}]},
    {"name": "npyNoteAccs$ebnf$2", "symbols": ["npyNoteAccs$ebnf$2", "npyNoteAccs$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "npyNoteAccs$ebnf$3$subexpression$1$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd32"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyNoteAccs$ebnf$3$subexpression$1", "symbols": ["npyNoteAccs$ebnf$3$subexpression$1$string$1"]},
    {"name": "npyNoteAccs$ebnf$3$subexpression$1", "symbols": [{"literal":"t"}]},
    {"name": "npyNoteAccs$ebnf$3", "symbols": ["npyNoteAccs$ebnf$3$subexpression$1"]},
    {"name": "npyNoteAccs$ebnf$3$subexpression$2$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd32"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyNoteAccs$ebnf$3$subexpression$2", "symbols": ["npyNoteAccs$ebnf$3$subexpression$2$string$1"]},
    {"name": "npyNoteAccs$ebnf$3$subexpression$2", "symbols": [{"literal":"t"}]},
    {"name": "npyNoteAccs$ebnf$3", "symbols": ["npyNoteAccs$ebnf$3", "npyNoteAccs$ebnf$3$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "npyNoteAccs", "symbols": ["npyNoteAccs$ebnf$1", "npyNoteAccs$ebnf$2", "npyNoteAccs$ebnf$3"], "postprocess": d => pyInterval(1, 2*d[0].length + d[1].length + 0.5*d[2].length)},
    {"name": "npyNoteAccs$ebnf$4$subexpression$1$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd33"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyNoteAccs$ebnf$4$subexpression$1", "symbols": ["npyNoteAccs$ebnf$4$subexpression$1$string$1"]},
    {"name": "npyNoteAccs$ebnf$4$subexpression$1", "symbols": [{"literal":"d"}]},
    {"name": "npyNoteAccs$ebnf$4", "symbols": ["npyNoteAccs$ebnf$4$subexpression$1"]},
    {"name": "npyNoteAccs$ebnf$4$subexpression$2$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd33"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyNoteAccs$ebnf$4$subexpression$2", "symbols": ["npyNoteAccs$ebnf$4$subexpression$2$string$1"]},
    {"name": "npyNoteAccs$ebnf$4$subexpression$2", "symbols": [{"literal":"d"}]},
    {"name": "npyNoteAccs$ebnf$4", "symbols": ["npyNoteAccs$ebnf$4", "npyNoteAccs$ebnf$4$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "npyNoteAccs$ebnf$5", "symbols": []},
    {"name": "npyNoteAccs$ebnf$5$subexpression$1", "symbols": [{"literal":"♭"}]},
    {"name": "npyNoteAccs$ebnf$5$subexpression$1", "symbols": [{"literal":"b"}]},
    {"name": "npyNoteAccs$ebnf$5", "symbols": ["npyNoteAccs$ebnf$5", "npyNoteAccs$ebnf$5$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "npyNoteAccs$ebnf$6", "symbols": []},
    {"name": "npyNoteAccs$ebnf$6$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd2b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyNoteAccs$ebnf$6", "symbols": ["npyNoteAccs$ebnf$6", "npyNoteAccs$ebnf$6$string$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "npyNoteAccs", "symbols": ["npyNoteAccs$ebnf$4", "npyNoteAccs$ebnf$5", "npyNoteAccs$ebnf$6"], "postprocess": d => pyInterval(-1, 2*d[0].length + d[1].length + 0.5*d[2].length)},
    {"name": "fjsIntv", "symbols": ["fjsNonNeutIntv"], "postprocess": d => d[0](fjsSpec)},
    {"name": "fjsNote", "symbols": ["fjsNonNeutNote"], "postprocess": d => d[0](fjsSpec)},
    {"name": "fjsNonNeutIntv", "symbols": ["pyIntv"], "postprocess": d => _ => d[0]},
    {"name": "fjsNonNeutIntv$macrocall$2", "symbols": ["fjsNonNeutIntv"]},
    {"name": "fjsNonNeutIntv$macrocall$1", "symbols": ["fjsNonNeutIntv$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "fjsNonNeutIntv$macrocall$1", "symbols": ["fjsNonNeutIntv$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "fjsNonNeutIntv$macrocall$1", "symbols": ["fjsNonNeutIntv$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "fjsNonNeutIntv$macrocall$1", "symbols": ["fjsNonNeutIntv$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "fjsNonNeutIntv", "symbols": ["fjsNonNeutIntv$macrocall$1"], "postprocess": id},
    {"name": "fjsNonNeutNote", "symbols": ["pyNote"], "postprocess": d => _ => d[0]},
    {"name": "fjsNonNeutNote$macrocall$2", "symbols": ["fjsNonNeutNote"]},
    {"name": "fjsNonNeutNote$macrocall$1", "symbols": ["fjsNonNeutNote$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "fjsNonNeutNote$macrocall$1", "symbols": ["fjsNonNeutNote$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "fjsNonNeutNote$macrocall$1", "symbols": ["fjsNonNeutNote$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "fjsNonNeutNote$macrocall$1", "symbols": ["fjsNonNeutNote$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "fjsNonNeutNote", "symbols": ["fjsNonNeutNote$macrocall$1"], "postprocess": id},
    {"name": "nfjsIntv", "symbols": ["nfjsNeutIntv"], "postprocess": d => d[0](nfjsSpec)},
    {"name": "nfjsIntv", "symbols": ["nfjsNonNeutIntv"], "postprocess": d => d[0](nfjsSpec)},
    {"name": "nfjsNote", "symbols": ["nfjsNeutNote"], "postprocess": d => d[0](nfjsSpec)},
    {"name": "nfjsNote", "symbols": ["nfjsNonNeutNote"], "postprocess": d => d[0](nfjsSpec)},
    {"name": "nfjsNeutIntv", "symbols": ["npyIntv"], "postprocess": d => _ => d[0]},
    {"name": "nfjsNeutIntv$macrocall$2", "symbols": ["nfjsNeutIntv"]},
    {"name": "nfjsNeutIntv$macrocall$1", "symbols": ["nfjsNeutIntv$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "nfjsNeutIntv$macrocall$1", "symbols": ["nfjsNeutIntv$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "nfjsNeutIntv$macrocall$1", "symbols": ["nfjsNeutIntv$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "nfjsNeutIntv$macrocall$1", "symbols": ["nfjsNeutIntv$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "nfjsNeutIntv", "symbols": ["nfjsNeutIntv$macrocall$1"], "postprocess": id},
    {"name": "nfjsNonNeutIntv", "symbols": ["pyIntv"], "postprocess": d => _ => d[0]},
    {"name": "nfjsNonNeutIntv$macrocall$2", "symbols": ["nfjsNonNeutIntv"]},
    {"name": "nfjsNonNeutIntv$macrocall$1", "symbols": ["nfjsNonNeutIntv$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "nfjsNonNeutIntv$macrocall$1", "symbols": ["nfjsNonNeutIntv$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "nfjsNonNeutIntv$macrocall$1", "symbols": ["nfjsNonNeutIntv$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "nfjsNonNeutIntv$macrocall$1", "symbols": ["nfjsNonNeutIntv$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "nfjsNonNeutIntv", "symbols": ["nfjsNonNeutIntv$macrocall$1"], "postprocess": id},
    {"name": "nfjsNeutNote", "symbols": ["npyNote"], "postprocess": d => _ => d[0]},
    {"name": "nfjsNeutNote$macrocall$2", "symbols": ["nfjsNeutNote"]},
    {"name": "nfjsNeutNote$macrocall$1", "symbols": ["nfjsNeutNote$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "nfjsNeutNote$macrocall$1", "symbols": ["nfjsNeutNote$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "nfjsNeutNote$macrocall$1", "symbols": ["nfjsNeutNote$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "nfjsNeutNote$macrocall$1", "symbols": ["nfjsNeutNote$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "nfjsNeutNote", "symbols": ["nfjsNeutNote$macrocall$1"], "postprocess": id},
    {"name": "nfjsNonNeutNote", "symbols": ["pyNote"], "postprocess": d => _ => d[0]},
    {"name": "nfjsNonNeutNote$macrocall$2", "symbols": ["nfjsNonNeutNote"]},
    {"name": "nfjsNonNeutNote$macrocall$1", "symbols": ["nfjsNonNeutNote$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "nfjsNonNeutNote$macrocall$1", "symbols": ["nfjsNonNeutNote$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "nfjsNonNeutNote$macrocall$1", "symbols": ["nfjsNonNeutNote$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "nfjsNonNeutNote$macrocall$1", "symbols": ["nfjsNonNeutNote$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "nfjsNonNeutNote", "symbols": ["nfjsNonNeutNote$macrocall$1"], "postprocess": id},
    {"name": "fjsLikeIntv", "symbols": ["fjsLikeSemiNeutIntv"], "postprocess": (d,loc,_) => ["!fjsSNPy", d[0], loc]},
    {"name": "fjsLikeIntv", "symbols": ["fjsLikeNeutIntv"], "postprocess": (d,loc,_) => ["!fjsNPy", d[0], loc]},
    {"name": "fjsLikeIntv", "symbols": ["fjsLikeNonNeutIntv"], "postprocess": (d,loc,_) => ["!fjsPy", d[0], loc]},
    {"name": "fjsLikeNote", "symbols": ["fjsLikeNeutNote"], "postprocess": (d,loc,_) => ["!fjsNPy", d[0], loc]},
    {"name": "fjsLikeNote", "symbols": ["fjsLikeNonNeutNote"], "postprocess": (d,loc,_) => ["!fjsPy", d[0], loc]},
    {"name": "strictFJSLikeIntv$macrocall$2", "symbols": ["fjsLikeSemiNeutIntv"]},
    {"name": "strictFJSLikeIntv$macrocall$1", "symbols": ["strictFJSLikeIntv$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "strictFJSLikeIntv$macrocall$1", "symbols": ["strictFJSLikeIntv$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "strictFJSLikeIntv$macrocall$1", "symbols": ["strictFJSLikeIntv$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "strictFJSLikeIntv$macrocall$1", "symbols": ["strictFJSLikeIntv$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "strictFJSLikeIntv", "symbols": ["strictFJSLikeIntv$macrocall$1"], "postprocess": (d,loc,_) => ["!fjsSNPy", d[0], loc]},
    {"name": "strictFJSLikeIntv$macrocall$4", "symbols": ["fjsLikeNeutIntv"]},
    {"name": "strictFJSLikeIntv$macrocall$3", "symbols": ["strictFJSLikeIntv$macrocall$4", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "strictFJSLikeIntv$macrocall$3", "symbols": ["strictFJSLikeIntv$macrocall$4", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "strictFJSLikeIntv$macrocall$3", "symbols": ["strictFJSLikeIntv$macrocall$4", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "strictFJSLikeIntv$macrocall$3", "symbols": ["strictFJSLikeIntv$macrocall$4", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "strictFJSLikeIntv", "symbols": ["strictFJSLikeIntv$macrocall$3"], "postprocess": (d,loc,_) => ["!fjsNPy", d[0], loc]},
    {"name": "strictFJSLikeIntv$macrocall$6", "symbols": ["fjsLikeNonNeutIntv"]},
    {"name": "strictFJSLikeIntv$macrocall$5", "symbols": ["strictFJSLikeIntv$macrocall$6", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "strictFJSLikeIntv$macrocall$5", "symbols": ["strictFJSLikeIntv$macrocall$6", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "strictFJSLikeIntv$macrocall$5", "symbols": ["strictFJSLikeIntv$macrocall$6", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "strictFJSLikeIntv$macrocall$5", "symbols": ["strictFJSLikeIntv$macrocall$6", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "strictFJSLikeIntv", "symbols": ["strictFJSLikeIntv$macrocall$5"], "postprocess": (d,loc,_) => ["!fjsPy", d[0], loc]},
    {"name": "strictFJSLikeNote$macrocall$2", "symbols": ["fjsLikeNeutNote"]},
    {"name": "strictFJSLikeNote$macrocall$1", "symbols": ["strictFJSLikeNote$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "strictFJSLikeNote$macrocall$1", "symbols": ["strictFJSLikeNote$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "strictFJSLikeNote$macrocall$1", "symbols": ["strictFJSLikeNote$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "strictFJSLikeNote$macrocall$1", "symbols": ["strictFJSLikeNote$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "strictFJSLikeNote", "symbols": ["strictFJSLikeNote$macrocall$1"], "postprocess": (d,loc,_) => ["!fjsNPy", d[0], loc]},
    {"name": "strictFJSLikeNote$macrocall$4", "symbols": ["fjsLikeNonNeutNote"]},
    {"name": "strictFJSLikeNote$macrocall$3", "symbols": ["strictFJSLikeNote$macrocall$4", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "strictFJSLikeNote$macrocall$3", "symbols": ["strictFJSLikeNote$macrocall$4", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "strictFJSLikeNote$macrocall$3", "symbols": ["strictFJSLikeNote$macrocall$4", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "strictFJSLikeNote$macrocall$3", "symbols": ["strictFJSLikeNote$macrocall$4", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "strictFJSLikeNote", "symbols": ["strictFJSLikeNote$macrocall$3"], "postprocess": (d,loc,_) => ["!fjsPy", d[0], loc]},
    {"name": "fjsLikeSemiNeutIntv", "symbols": ["snpyIntv"], "postprocess": d => _ => d[0]},
    {"name": "fjsLikeSemiNeutIntv$macrocall$2", "symbols": ["fjsLikeSemiNeutIntv"]},
    {"name": "fjsLikeSemiNeutIntv$macrocall$1", "symbols": ["fjsLikeSemiNeutIntv$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "fjsLikeSemiNeutIntv$macrocall$1", "symbols": ["fjsLikeSemiNeutIntv$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "fjsLikeSemiNeutIntv$macrocall$1", "symbols": ["fjsLikeSemiNeutIntv$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "fjsLikeSemiNeutIntv$macrocall$1", "symbols": ["fjsLikeSemiNeutIntv$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "fjsLikeSemiNeutIntv", "symbols": ["fjsLikeSemiNeutIntv$macrocall$1"], "postprocess": id},
    {"name": "fjsLikeNeutIntv", "symbols": ["npyIntv"], "postprocess": d => _ => d[0]},
    {"name": "fjsLikeNeutIntv$macrocall$2", "symbols": ["fjsLikeNeutIntv"]},
    {"name": "fjsLikeNeutIntv$macrocall$1", "symbols": ["fjsLikeNeutIntv$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "fjsLikeNeutIntv$macrocall$1", "symbols": ["fjsLikeNeutIntv$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "fjsLikeNeutIntv$macrocall$1", "symbols": ["fjsLikeNeutIntv$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "fjsLikeNeutIntv$macrocall$1", "symbols": ["fjsLikeNeutIntv$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "fjsLikeNeutIntv", "symbols": ["fjsLikeNeutIntv$macrocall$1"], "postprocess": id},
    {"name": "fjsLikeNonNeutIntv", "symbols": ["pyIntv"], "postprocess": d => _ => d[0]},
    {"name": "fjsLikeNonNeutIntv$macrocall$2", "symbols": ["fjsLikeNonNeutIntv"]},
    {"name": "fjsLikeNonNeutIntv$macrocall$1", "symbols": ["fjsLikeNonNeutIntv$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "fjsLikeNonNeutIntv$macrocall$1", "symbols": ["fjsLikeNonNeutIntv$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "fjsLikeNonNeutIntv$macrocall$1", "symbols": ["fjsLikeNonNeutIntv$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "fjsLikeNonNeutIntv$macrocall$1", "symbols": ["fjsLikeNonNeutIntv$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "fjsLikeNonNeutIntv", "symbols": ["fjsLikeNonNeutIntv$macrocall$1"], "postprocess": id},
    {"name": "fjsLikeNeutNote", "symbols": ["npyNote"], "postprocess": d => _ => d[0]},
    {"name": "fjsLikeNeutNote$macrocall$2", "symbols": ["fjsLikeNeutNote"]},
    {"name": "fjsLikeNeutNote$macrocall$1", "symbols": ["fjsLikeNeutNote$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "fjsLikeNeutNote$macrocall$1", "symbols": ["fjsLikeNeutNote$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "fjsLikeNeutNote$macrocall$1", "symbols": ["fjsLikeNeutNote$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "fjsLikeNeutNote$macrocall$1", "symbols": ["fjsLikeNeutNote$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "fjsLikeNeutNote", "symbols": ["fjsLikeNeutNote$macrocall$1"], "postprocess": id},
    {"name": "fjsLikeNonNeutNote", "symbols": ["pyNote"], "postprocess": d => _ => d[0]},
    {"name": "fjsLikeNonNeutNote$macrocall$2", "symbols": ["fjsLikeNonNeutNote"]},
    {"name": "fjsLikeNonNeutNote$macrocall$1", "symbols": ["fjsLikeNonNeutNote$macrocall$2", {"literal":"^"}, "fjsAccList"], "postprocess": d => spec => ["mul", d[0][0](spec), d[2](spec)]},
    {"name": "fjsLikeNonNeutNote$macrocall$1", "symbols": ["fjsLikeNonNeutNote$macrocall$2", "fjsSupAcc"], "postprocess": d => spec => ["mul", d[0][0](spec), d[1](spec)]},
    {"name": "fjsLikeNonNeutNote$macrocall$1", "symbols": ["fjsLikeNonNeutNote$macrocall$2", {"literal":"_"}, "fjsAccList"], "postprocess": d => spec => ["div", d[0][0](spec), d[2](spec)]},
    {"name": "fjsLikeNonNeutNote$macrocall$1", "symbols": ["fjsLikeNonNeutNote$macrocall$2", "fjsSubAcc"], "postprocess": d => spec => ["div", d[0][0](spec), d[1](spec)]},
    {"name": "fjsLikeNonNeutNote", "symbols": ["fjsLikeNonNeutNote$macrocall$1"], "postprocess": id},
    {"name": "fjsAccList", "symbols": ["fjsAcc"], "postprocess": d => spec => ["!fjsFactor", d[0], spec]},
    {"name": "fjsAccList", "symbols": ["fjsAccList", {"literal":","}, "fjsAcc"], "postprocess": d => spec => ["mul", d[0](spec), ["!fjsFactor", d[2], spec]]},
    {"name": "fjsAcc", "symbols": ["fjsAccExpr"], "postprocess": (d,loc,_) => ["!ensureNo2Or3", d[0], loc]},
    {"name": "fjsAccExpr", "symbols": ["posInt"], "postprocess": d => Interval(d[0])},
    {"name": "fjsAccExpr$string$1", "symbols": [{"literal":"s"}, {"literal":"q"}, {"literal":"r"}, {"literal":"t"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "fjsAccExpr", "symbols": ["fjsAccExpr$string$1", "fjsAccExpr", {"literal":")"}], "postprocess": d => d[1].sqrt()},
    {"name": "fjsAccExpr$string$2", "symbols": [{"literal":"r"}, {"literal":"o"}, {"literal":"o"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "fjsAccExpr", "symbols": ["fjsAccExpr$string$2", "posInt", {"literal":"("}, "fjsAccExpr", {"literal":")"}], "postprocess": d => d[3].root(parseInt(d[1]))},
    {"name": "fjsAccExpr", "symbols": [{"literal":"("}, "fjsAccExpr", {"literal":"^"}, "frcExpr3", {"literal":")"}], "postprocess": d => d[1].pow(d[3])},
    {"name": "fjsSupAcc", "symbols": ["posIntSup"], "postprocess": (d,loc,_) => spec => ["!fjsFactor", ["!ensureNo2Or3", Interval(d[0]), loc], spec]},
    {"name": "fjsSubAcc", "symbols": ["posIntSub"], "postprocess": (d,loc,_) => spec => ["!fjsFactor", ["!ensureNo2Or3", Interval(d[0]), loc], spec]},
    {"name": "upsDnsIntv", "symbols": ["upsDnsIntvAbD"], "postprocess": id},
    {"name": "upsDnsIntv", "symbols": ["upsDnsIntvVbD"], "postprocess": id},
    {"name": "upsDnsIntvAbD", "symbols": ["upsDnsIntvAb"], "postprocess": id},
    {"name": "upsDnsIntvAbD", "symbols": ["desc", "upsDnsIntvAb"], "postprocess": d => ["-", 0, d[1]]},
    {"name": "upsDnsIntvAb", "symbols": ["upsDns", "pyIntv"], "postprocess": (d,loc,_) => ["!updnsSymb", d[0], d[1], loc]},
    {"name": "upsDnsIntvAb", "symbols": ["upsDns", "npyIntv"], "postprocess": (d,loc,_) => ["!updnsSymb", d[0], d[1], loc]},
    {"name": "upsDnsIntvAb", "symbols": ["upsDns", "snpyIntv"], "postprocess": (d,loc,_) => ["!updnsSymb", d[0], d[1], loc]},
    {"name": "upsDnsIntvAb", "symbols": ["upsDnsNz", "degV0"], "postprocess": (d,loc,_) => ["!updnsPerfSymb", d[0], d[1], loc]},
    {"name": "upsDnsIntvAb", "symbols": ["upsDns", {"literal":"~"}, "degV0"], "postprocess": (d,loc,_) => ["!updnsNeutSymb", d[0], d[2], loc]},
    {"name": "upsDnsIntvVbD", "symbols": ["upsDnsIntvVb"], "postprocess": id},
    {"name": "upsDnsIntvVbD", "symbols": ["desc", "upsDnsIntvVb"], "postprocess": d => ["-", 0, d[1]]},
    {"name": "upsDnsIntvVb", "symbols": ["upsDnsVb", "upDnsVbSep", "pyIntvVb"], "postprocess": (d,loc,_) => ["!updnsSymb", d[0], d[2], loc]},
    {"name": "upsDnsIntvVb", "symbols": ["upsDnsVb", "upDnsVbSep", "npyIntvVb"], "postprocess": (d,loc,_) => ["!updnsSymb", d[0], d[2], loc]},
    {"name": "upsDnsIntvVb", "symbols": ["upsDnsVb", "upDnsVbSep", "snpyIntvVb"], "postprocess": (d,loc,_) => ["!updnsSymb", d[0], d[2], loc]},
    {"name": "upsDnsIntvVb", "symbols": ["upsDnsVbNz", "degV1"], "postprocess": (d,loc,_) => ["!updnsPerfSymb", d[0], d[1], loc]},
    {"name": "upsDnsIntvVb", "symbols": ["degV1Uniq"], "postprocess": (d,loc,_) => ["!updnsPerfSymb", 0, d[0], loc]},
    {"name": "upsDnsIntvVb$string$1", "symbols": [{"literal":"m"}, {"literal":"i"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "upsDnsIntvVb", "symbols": ["upsDnsVb", "upDnsVbSep", "upsDnsIntvVb$string$1", "degV1"], "postprocess": (d,loc,_) => ["!updnsNeutSymb", d[0], d[3], loc]},
    {"name": "upsDnsNote", "symbols": ["upsDns", "pyNote"], "postprocess": (d,loc,_) => ["!updnsNote", d[0], d[1], loc]},
    {"name": "upsDnsNote", "symbols": ["upsDns", "npyNote"], "postprocess": (d,loc,_) => ["!updnsNote", d[0], d[1], loc]},
    {"name": "upsDns", "symbols": [], "postprocess": d => 0},
    {"name": "upsDns", "symbols": ["upsDnsNz"], "postprocess": id},
    {"name": "upsDnsNz$ebnf$1", "symbols": [{"literal":"^"}]},
    {"name": "upsDnsNz$ebnf$1", "symbols": ["upsDnsNz$ebnf$1", {"literal":"^"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "upsDnsNz", "symbols": ["upsDnsNz$ebnf$1"], "postprocess": d => d[0].length},
    {"name": "upsDnsNz$ebnf$2", "symbols": [{"literal":"v"}]},
    {"name": "upsDnsNz$ebnf$2", "symbols": ["upsDnsNz$ebnf$2", {"literal":"v"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "upsDnsNz", "symbols": ["upsDnsNz$ebnf$2"], "postprocess": d => -d[0].length},
    {"name": "upsDnsNz$string$1", "symbols": [{"literal":"("}, {"literal":"^"}, {"literal":")"}, {"literal":"^"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "upsDnsNz", "symbols": ["upsDnsNz$string$1", "posInt"], "postprocess": d => parseInt(d[1])},
    {"name": "upsDnsNz$string$2", "symbols": [{"literal":"("}, {"literal":"v"}, {"literal":")"}, {"literal":"^"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "upsDnsNz", "symbols": ["upsDnsNz$string$2", "posInt"], "postprocess": d => -parseInt(d[1])},
    {"name": "upsDnsNz", "symbols": [{"literal":"^"}, "posIntSup"], "postprocess": d => d[1]},
    {"name": "upsDnsNz", "symbols": [{"literal":"v"}, "posIntSup"], "postprocess": d => -d[1]},
    {"name": "upsDnsVb", "symbols": [], "postprocess": d => 0},
    {"name": "upsDnsVb", "symbols": ["upsDnsVbNz"], "postprocess": id},
    {"name": "upsDnsVbNz$string$1", "symbols": [{"literal":"u"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "upsDnsVbNz", "symbols": ["upsDnsVbNz$string$1"], "postprocess": d => 1},
    {"name": "upsDnsVbNz$string$2", "symbols": [{"literal":"d"}, {"literal":"o"}, {"literal":"w"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "upsDnsVbNz", "symbols": ["upsDnsVbNz$string$2"], "postprocess": d => -1},
    {"name": "upsDnsVbNz$string$3", "symbols": [{"literal":"d"}, {"literal":"o"}, {"literal":"u"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}, {"literal":"-"}, {"literal":"u"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "upsDnsVbNz", "symbols": ["upsDnsVbNz$string$3"], "postprocess": d => 2},
    {"name": "upsDnsVbNz$string$4", "symbols": [{"literal":"d"}, {"literal":"o"}, {"literal":"u"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}, {"literal":"-"}, {"literal":"d"}, {"literal":"o"}, {"literal":"w"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "upsDnsVbNz", "symbols": ["upsDnsVbNz$string$4"], "postprocess": d => -2},
    {"name": "upsDnsVbNz$string$5", "symbols": [{"literal":"t"}, {"literal":"r"}, {"literal":"i"}, {"literal":"p"}, {"literal":"l"}, {"literal":"e"}, {"literal":"-"}, {"literal":"u"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "upsDnsVbNz", "symbols": ["upsDnsVbNz$string$5"], "postprocess": d => 3},
    {"name": "upsDnsVbNz$string$6", "symbols": [{"literal":"t"}, {"literal":"r"}, {"literal":"i"}, {"literal":"p"}, {"literal":"l"}, {"literal":"e"}, {"literal":"-"}, {"literal":"d"}, {"literal":"o"}, {"literal":"w"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "upsDnsVbNz", "symbols": ["upsDnsVbNz$string$6"], "postprocess": d => -3},
    {"name": "upsDnsVbNz$string$7", "symbols": [{"literal":"-"}, {"literal":"u"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "upsDnsVbNz", "symbols": ["posInt", "upsDnsVbNz$string$7"], "postprocess": d => parseInt(d[0])},
    {"name": "upsDnsVbNz$string$8", "symbols": [{"literal":"-"}, {"literal":"d"}, {"literal":"o"}, {"literal":"w"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "upsDnsVbNz", "symbols": ["posInt", "upsDnsVbNz$string$8"], "postprocess": d => -parseInt(d[0])},
    {"name": "upDnsVbSep", "symbols": ["_"]},
    {"name": "upDnsVbSep", "symbols": ["_", {"literal":"-"}, "_"]},
    {"name": "anyClrIntv", "symbols": ["aclrIntv"], "postprocess": id},
    {"name": "anyClrIntv", "symbols": ["clrIntv"], "postprocess": id},
    {"name": "anyClrNote", "symbols": ["aclrNote"], "postprocess": id},
    {"name": "anyClrNote", "symbols": ["clrNote"], "postprocess": id},
    {"name": "aclrIntv", "symbols": ["aclrCos", "aclrM", "aclrP", "degV0"], "postprocess": (d,loc,_) => ["!clrIntv", d[0], d[1], d[2], d[3], loc]},
    {"name": "aclrIntv", "symbols": ["desc", "aclrCos", "aclrM", "aclrP", "degV0"], "postprocess": (d,loc,_) => ["recip", ["!clrIntv", d[1], d[2], d[3], d[4], loc]]},
    {"name": "aclrNote", "symbols": ["aclrP", "pyNote"], "postprocess": (d,loc,_) => ["!clrNote", d[0], d[1], loc]},
    {"name": "aclrCos", "symbols": [], "postprocess": d => 0},
    {"name": "aclrCos$ebnf$1", "symbols": [{"literal":"c"}]},
    {"name": "aclrCos$ebnf$1", "symbols": ["aclrCos$ebnf$1", {"literal":"c"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "aclrCos", "symbols": ["aclrCos$ebnf$1"], "postprocess": d => d[0].length},
    {"name": "aclrCos$string$1", "symbols": [{"literal":"c"}, {"literal":"^"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "aclrCos", "symbols": ["aclrCos$string$1", /[1-9]/], "postprocess": d => parseInt(d[1])},
    {"name": "aclrCos$string$2", "symbols": [{"literal":"c"}, {"literal":"^"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "aclrCos", "symbols": ["aclrCos$string$2", "posInt", {"literal":")"}], "postprocess": d => parseInt(d[1])},
    {"name": "aclrCos", "symbols": [{"literal":"c"}, "posIntSup"], "postprocess": d => parseInt(d[1])},
    {"name": "aclrM", "symbols": [], "postprocess": d => 0},
    {"name": "aclrM$ebnf$1", "symbols": [{"literal":"L"}]},
    {"name": "aclrM$ebnf$1", "symbols": ["aclrM$ebnf$1", {"literal":"L"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "aclrM", "symbols": ["aclrM$ebnf$1"], "postprocess": d => d[0].length},
    {"name": "aclrM$string$1", "symbols": [{"literal":"L"}, {"literal":"^"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "aclrM", "symbols": ["aclrM$string$1", /[1-9]/], "postprocess": d => parseInt(d[1])},
    {"name": "aclrM$string$2", "symbols": [{"literal":"L"}, {"literal":"^"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "aclrM", "symbols": ["aclrM$string$2", "posInt", {"literal":")"}], "postprocess": d => parseInt(d[1])},
    {"name": "aclrM", "symbols": [{"literal":"L"}, "posIntSup"], "postprocess": d => parseInt(d[1])},
    {"name": "aclrM$ebnf$2", "symbols": [{"literal":"s"}]},
    {"name": "aclrM$ebnf$2", "symbols": ["aclrM$ebnf$2", {"literal":"s"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "aclrM", "symbols": ["aclrM$ebnf$2"], "postprocess": d => -d[0].length},
    {"name": "aclrM$string$3", "symbols": [{"literal":"s"}, {"literal":"^"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "aclrM", "symbols": ["aclrM$string$3", /[1-9]/], "postprocess": d => -parseInt(d[1])},
    {"name": "aclrM$string$4", "symbols": [{"literal":"s"}, {"literal":"^"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "aclrM", "symbols": ["aclrM$string$4", "posInt", {"literal":")"}], "postprocess": d => -parseInt(d[1])},
    {"name": "aclrM", "symbols": [{"literal":"s"}, "posIntSup"], "postprocess": d => -parseInt(d[1])},
    {"name": "aclrP", "symbols": [{"literal":"w"}], "postprocess": d => []},
    {"name": "aclrP$ebnf$1", "symbols": ["aclrPP1"]},
    {"name": "aclrP$ebnf$1", "symbols": ["aclrP$ebnf$1", "aclrPP1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "aclrP", "symbols": ["aclrP$ebnf$1"], "postprocess": d => d[0].flat(1)},
    {"name": "aclrPP1", "symbols": ["aclrPP"], "postprocess": d => [d[0]]},
    {"name": "aclrPP1", "symbols": ["aclrPP", {"literal":"^"}, /[1-9]/], "postprocess": d => Array(parseInt(d[2])).fill(d[0])},
    {"name": "aclrPP1$string$1", "symbols": [{"literal":"^"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "aclrPP1", "symbols": ["aclrPP", "aclrPP1$string$1", "posInt", {"literal":")"}], "postprocess": d => Array(parseInt(d[2])).fill(d[0])},
    {"name": "aclrPP1", "symbols": ["aclrPP", "posIntSup"], "postprocess": d => Array(parseInt(d[1])).fill(d[0])},
    {"name": "aclrPP", "symbols": [{"literal":"y"}], "postprocess": d => Interval(5)},
    {"name": "aclrPP", "symbols": [{"literal":"g"}], "postprocess": d => Interval(1,5)},
    {"name": "aclrPP", "symbols": [{"literal":"z"}], "postprocess": d => Interval(7)},
    {"name": "aclrPP", "symbols": [{"literal":"r"}], "postprocess": d => Interval(1,7)},
    {"name": "aclrPP$ebnf$1", "symbols": [{"literal":"o"}]},
    {"name": "aclrPP$ebnf$1", "symbols": ["aclrPP$ebnf$1", {"literal":"o"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "aclrPP", "symbols": ["posInt", "aclrPP$ebnf$1"], "postprocess": (d,loc,_) => ["!aclrPP", parseInt(d[0]), d[1].length, loc]},
    {"name": "aclrPP$ebnf$2", "symbols": [{"literal":"u"}]},
    {"name": "aclrPP$ebnf$2", "symbols": ["aclrPP$ebnf$2", {"literal":"u"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "aclrPP", "symbols": ["posInt", "aclrPP$ebnf$2"], "postprocess": (d,loc,_) => ["!aclrPP", parseInt(d[0]), -d[1].length, loc]},
    {"name": "clrIntv", "symbols": ["clrCos", "clrM", "clrP", "degV1"], "postprocess": (d,loc,_) => ["!clrIntv", d[0], d[1], d[2], d[3], loc]},
    {"name": "clrIntv", "symbols": ["desc", "clrCos", "clrM", "clrP", "degV1"], "postprocess": (d,loc,_) => ["recip", ["!clrIntv", d[1], d[2], d[3], d[4], loc]]},
    {"name": "clrNote", "symbols": ["clrP", "_", "pyNote"], "postprocess": (d,loc,_) => ["!clrNote", d[0], d[2], loc]},
    {"name": "clrCos", "symbols": [], "postprocess": d => 0},
    {"name": "clrCos$subexpression$1", "symbols": [/[cC]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrCos$ebnf$1", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "clrCos$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "clrCos", "symbols": ["clrCos$subexpression$1", {"literal":"o"}, "clrCos$ebnf$1", "clrCos"], "postprocess": d => ["+", d[3], 1]},
    {"name": "clrCos$subexpression$2", "symbols": [/[cC]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrCos$ebnf$2", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "clrCos$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "clrCos", "symbols": ["clrMPs", "clrCos$subexpression$2", {"literal":"o"}, "clrCos$ebnf$2", "clrCos"], "postprocess": d => ["+", d[4], d[0]]},
    {"name": "clrM", "symbols": [], "postprocess": d => 0},
    {"name": "clrM$subexpression$1", "symbols": [/[lL]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrM$ebnf$1", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "clrM$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "clrM", "symbols": ["clrM$subexpression$1", {"literal":"a"}, "clrM$ebnf$1", "clrM"], "postprocess": d => ["+", d[3], 1]},
    {"name": "clrM$subexpression$2", "symbols": [/[lL]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrM$ebnf$2", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "clrM$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "clrM", "symbols": ["clrMPs", "clrM$subexpression$2", {"literal":"a"}, "clrM$ebnf$2", "clrM"], "postprocess": d => ["+", d[4], d[0]]},
    {"name": "clrM$subexpression$3", "symbols": [/[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrM$ebnf$3", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "clrM$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "clrM", "symbols": ["clrM$subexpression$3", {"literal":"a"}, "clrM$ebnf$3", "clrM"], "postprocess": d => ["-", d[3], 1]},
    {"name": "clrM$subexpression$4", "symbols": [/[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrM$ebnf$4", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "clrM$ebnf$4", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "clrM", "symbols": ["clrMPs", "clrM$subexpression$4", {"literal":"a"}, "clrM$ebnf$4", "clrM"], "postprocess": d => ["-", d[4], d[0]]},
    {"name": "clrP$subexpression$1", "symbols": [/[wW]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrP", "symbols": ["clrP$subexpression$1", {"literal":"a"}], "postprocess": d => []},
    {"name": "clrP$subexpression$2", "symbols": [/[iI]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrP$string$1", "symbols": [{"literal":"l"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "clrP", "symbols": ["clrP$subexpression$2", "clrP$string$1"], "postprocess": d => [Interval(11)]},
    {"name": "clrP$subexpression$3", "symbols": [/[iI]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrP$string$2", "symbols": [{"literal":"s"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "clrP", "symbols": ["clrP$subexpression$3", "clrP$string$2"], "postprocess": d => [Interval(17)]},
    {"name": "clrP$subexpression$4", "symbols": [/[iI]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrP$string$3", "symbols": [{"literal":"n"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "clrP", "symbols": ["clrP$subexpression$4", "clrP$string$3"], "postprocess": d => [Interval(19)]},
    {"name": "clrP$subexpression$5", "symbols": [/[iI]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrP$string$4", "symbols": [{"literal":"n"}, {"literal":"u"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "clrP", "symbols": ["clrP$subexpression$5", "clrP$string$4"], "postprocess": d => [Interval(1,19)]},
    {"name": "clrP", "symbols": ["clrPPs"], "postprocess": id},
    {"name": "clrPPs$ebnf$1", "symbols": ["clrPPsMid1"], "postprocess": id},
    {"name": "clrPPs$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "clrPPs", "symbols": ["clrPPs$ebnf$1", "clrPPsMid3", "clrPPsEnd"], "postprocess": d => (d[0] || []).concat(d[1]).concat(d[2])},
    {"name": "clrPPs", "symbols": ["clrPPsEnd"], "postprocess": id},
    {"name": "clrPPsEnd", "symbols": ["clrPP"], "postprocess": d => [d[0]]},
    {"name": "clrPPsEnd", "symbols": ["clrPP", "clrPPsEnd"], "postprocess": d => [d[0]].concat(d[1])},
    {"name": "clrPPsEnd$ebnf$1$string$1", "symbols": [{"literal":"-"}, {"literal":"a"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "clrPPsEnd$ebnf$1", "symbols": ["clrPPsEnd$ebnf$1$string$1"], "postprocess": id},
    {"name": "clrPPsEnd$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "clrPPsEnd", "symbols": ["clrMPs", "clrPPsEnd", "clrPPsEnd$ebnf$1"], "postprocess": d => d[1].map(i => ["pow", i, d[0]])},
    {"name": "clrPPsMid1", "symbols": ["clrPPsMid1", "clrPPsMid2"], "postprocess": d => d[0].concat(d[1])},
    {"name": "clrPPsMid1", "symbols": ["clrPPsMid2"], "postprocess": id},
    {"name": "clrPPsMid2", "symbols": ["clrPP"], "postprocess": d => [d[0]]},
    {"name": "clrPPsMid2", "symbols": ["clrPPsMid3"], "postprocess": id},
    {"name": "clrPPsMid3$ebnf$1", "symbols": [{"literal":"a"}], "postprocess": id},
    {"name": "clrPPsMid3$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "clrPPsMid3", "symbols": ["clrMPs", "clrPPsMid1", {"literal":"-"}, "clrPPsMid3$ebnf$1"], "postprocess": d => d[1].map(i => ["pow", i, d[0]])},
    {"name": "clrPP$subexpression$1", "symbols": [/[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrPP", "symbols": ["clrPP$subexpression$1", {"literal":"o"}], "postprocess": d => Interval(5)},
    {"name": "clrPP$subexpression$2", "symbols": [/[gG]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrPP", "symbols": ["clrPP$subexpression$2", {"literal":"u"}], "postprocess": d => Interval(1,5)},
    {"name": "clrPP$subexpression$3", "symbols": [/[zZ]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrPP", "symbols": ["clrPP$subexpression$3", {"literal":"o"}], "postprocess": d => Interval(7)},
    {"name": "clrPP$subexpression$4", "symbols": [/[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrPP", "symbols": ["clrPP$subexpression$4", {"literal":"u"}], "postprocess": d => Interval(1,7)},
    {"name": "clrPP$subexpression$5", "symbols": [/[lL]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrPP", "symbols": ["clrPP$subexpression$5", {"literal":"o"}], "postprocess": d => Interval(11)},
    {"name": "clrPP$subexpression$6", "symbols": [/[lL]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrPP", "symbols": ["clrPP$subexpression$6", {"literal":"u"}], "postprocess": d => Interval(1,11)},
    {"name": "clrPP", "symbols": ["clrGenPP", {"literal":"o"}], "postprocess": d => d[0]},
    {"name": "clrPP", "symbols": ["clrGenPP", {"literal":"u"}], "postprocess": d => ["recip", d[0]]},
    {"name": "clrMPs$ebnf$1", "symbols": ["clrMP"]},
    {"name": "clrMPs$ebnf$1", "symbols": ["clrMPs$ebnf$1", "clrMP"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "clrMPs", "symbols": ["clrMPs$ebnf$1"], "postprocess": (d,loc,_) => ["!clrMPs", d[0], loc]},
    {"name": "clrMP$subexpression$1", "symbols": [/[bB]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrMP", "symbols": ["clrMP$subexpression$1", {"literal":"i"}], "postprocess": d => 2},
    {"name": "clrMP$subexpression$2", "symbols": [/[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrMP$string$1", "symbols": [{"literal":"r"}, {"literal":"i"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "clrMP", "symbols": ["clrMP$subexpression$2", "clrMP$string$1"], "postprocess": d => 3},
    {"name": "clrMP$subexpression$3", "symbols": [/[qQ]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrMP$string$2", "symbols": [{"literal":"u"}, {"literal":"a"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "clrMP", "symbols": ["clrMP$subexpression$3", "clrMP$string$2"], "postprocess": d => 4},
    {"name": "clrMP$subexpression$4", "symbols": [/[qQ]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrMP$string$3", "symbols": [{"literal":"u"}, {"literal":"i"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "clrMP", "symbols": ["clrMP$subexpression$4", "clrMP$string$3"], "postprocess": d => 5},
    {"name": "clrMP$subexpression$5", "symbols": [/[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrMP$string$4", "symbols": [{"literal":"e"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "clrMP", "symbols": ["clrMP$subexpression$5", "clrMP$string$4"], "postprocess": d => 7},
    {"name": "clrMP$subexpression$6", "symbols": [/[lL]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrMP", "symbols": ["clrMP$subexpression$6", {"literal":"e"}], "postprocess": d => 11},
    {"name": "clrMP", "symbols": ["clrGenPP", {"literal":"e"}], "postprocess": d => ["valueOf", d[0]]},
    {"name": "clrGenPP", "symbols": ["clrTens", "clrOnes"], "postprocess": (d,loc,_) => ["!clrGenPP", d[0] + d[1], loc]},
    {"name": "clrTens", "symbols": [], "postprocess": d => 10},
    {"name": "clrTens$subexpression$1", "symbols": [/[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrTens$string$1", "symbols": [{"literal":"w"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "clrTens", "symbols": ["clrTens$subexpression$1", "clrTens$string$1"], "postprocess": d => 20},
    {"name": "clrTens$subexpression$2", "symbols": [/[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrTens$string$2", "symbols": [{"literal":"h"}, {"literal":"i"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "clrTens", "symbols": ["clrTens$subexpression$2", "clrTens$string$2"], "postprocess": d => 30},
    {"name": "clrTens$subexpression$3", "symbols": [/[fF]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrTens", "symbols": ["clrTens$subexpression$3", {"literal":"o"}], "postprocess": d => 40},
    {"name": "clrTens$subexpression$4", "symbols": [/[fF]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrTens", "symbols": ["clrTens$subexpression$4", {"literal":"i"}], "postprocess": d => 50},
    {"name": "clrTens$subexpression$5", "symbols": [/[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrTens", "symbols": ["clrTens$subexpression$5", {"literal":"i"}], "postprocess": d => 60},
    {"name": "clrOnes$subexpression$1", "symbols": [/[wW]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrOnes", "symbols": ["clrOnes$subexpression$1"], "postprocess": d => 1},
    {"name": "clrOnes$subexpression$2", "symbols": [/[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrOnes", "symbols": ["clrOnes$subexpression$2", {"literal":"h"}], "postprocess": d => 3},
    {"name": "clrOnes$subexpression$3", "symbols": [/[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrOnes", "symbols": ["clrOnes$subexpression$3"], "postprocess": d => 7},
    {"name": "clrOnes$subexpression$4", "symbols": [/[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "clrOnes", "symbols": ["clrOnes$subexpression$4"], "postprocess": d => 9},
    {"name": "degV0", "symbols": ["posInt"], "postprocess": d => parseInt(d[0])},
    {"name": "degV0", "symbols": [{"literal":"-"}, "posInt"], "postprocess": d => - parseInt(d[1])},
    {"name": "degV1$string$1", "symbols": [{"literal":"n"}, {"literal":"e"}, {"literal":"g"}, {"literal":"a"}, {"literal":"t"}, {"literal":"i"}, {"literal":"v"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "degV1", "symbols": ["__", "degV1$string$1", "__", "degV1Pos"], "postprocess": d => -d[3]},
    {"name": "degV1", "symbols": ["_", {"literal":"-"}, "_", "degOrdinal"], "postprocess": d => -d[3]},
    {"name": "degV1", "symbols": ["__", "degWord"], "postprocess": d => d[1]},
    {"name": "degV1", "symbols": ["_", "degOrdinal"], "postprocess": d => d[1]},
    {"name": "degV1", "symbols": ["_", "posInt"], "postprocess": d => parseInt(d[1])},
    {"name": "degV1", "symbols": ["_", {"literal":"-"}, "_", "posInt"], "postprocess": d => - parseInt(d[3])},
    {"name": "degV1Pos", "symbols": ["degWord"], "postprocess": id},
    {"name": "degV1Pos", "symbols": ["degOrdinal"], "postprocess": id},
    {"name": "degWord$string$1", "symbols": [{"literal":"u"}, {"literal":"n"}, {"literal":"i"}, {"literal":"s"}, {"literal":"o"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "degWord", "symbols": ["degWord$string$1"], "postprocess": d => 1},
    {"name": "degWord$string$2", "symbols": [{"literal":"o"}, {"literal":"c"}, {"literal":"t"}, {"literal":"a"}, {"literal":"v"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "degWord", "symbols": ["degWord$string$2"], "postprocess": d => 8},
    {"name": "degOrdinal$string$1", "symbols": [{"literal":"1"}, {"literal":"s"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "degOrdinal", "symbols": ["degOrdinal$string$1"], "postprocess": d => 1},
    {"name": "degOrdinal$string$2", "symbols": [{"literal":"8"}, {"literal":"v"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "degOrdinal", "symbols": ["degOrdinal$string$2"], "postprocess": d => 8},
    {"name": "degOrdinal", "symbols": ["ordinal"], "postprocess": d => parseInt(d[0])},
    {"name": "degV1Uniq$string$1", "symbols": [{"literal":"n"}, {"literal":"e"}, {"literal":"g"}, {"literal":"a"}, {"literal":"t"}, {"literal":"i"}, {"literal":"v"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "degV1Uniq", "symbols": ["degV1Uniq$string$1", "__", "degV1Pos"], "postprocess": d => -d[2]},
    {"name": "degV1Uniq", "symbols": ["degV1Pos"], "postprocess": id},
    {"name": "desc$string$1", "symbols": [{"literal":"d"}, {"literal":"e"}, {"literal":"s"}, {"literal":"c"}, {"literal":"."}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "desc", "symbols": ["desc$string$1", "__"]},
    {"name": "desc$string$2", "symbols": [{"literal":"d"}, {"literal":"e"}, {"literal":"s"}, {"literal":"c"}, {"literal":"e"}, {"literal":"n"}, {"literal":"d"}, {"literal":"i"}, {"literal":"n"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "desc", "symbols": ["desc$string$2", "__"]},
    {"name": "frcExpr1", "symbols": ["frcExpr1", "_", {"literal":"+"}, "_", "frcExpr2"], "postprocess": d => d[0].add(d[4])},
    {"name": "frcExpr1", "symbols": ["frcExpr1", "_", {"literal":"-"}, "_", "frcExpr2"], "postprocess": d => d[0].sub(d[4])},
    {"name": "frcExpr1", "symbols": ["frcExpr2"], "postprocess": id},
    {"name": "frcExpr2", "symbols": ["frcExpr2", "_", {"literal":"*"}, "_", "frcExpr3"], "postprocess": d => d[0].mul(d[4])},
    {"name": "frcExpr2", "symbols": ["frcExpr2", "_", {"literal":"/"}, "_", "locFrcExpr3"], "postprocess":  function(d) { try { return d[0].div(d[4][0]); }
        catch(err) {
          throw new OtherError("Division by zero", d[4][1])
        } } },
    {"name": "frcExpr2", "symbols": ["frcExpr3"], "postprocess": id},
    {"name": "frcExpr3", "symbols": [{"literal":"-"}, "_", "frcExpr4"], "postprocess": d => d[2].neg()},
    {"name": "frcExpr3", "symbols": ["frcExpr4"], "postprocess": id},
    {"name": "frcExpr4", "symbols": ["frcExpr5", "_", {"literal":"^"}, "_", "intExpr3"], "postprocess": d => d[0].pow(d[4])},
    {"name": "frcExpr4", "symbols": ["frcExpr5"], "postprocess": id},
    {"name": "frcExpr5", "symbols": ["nonNegInt"], "postprocess": d => Fraction(d[0])},
    {"name": "frcExpr5", "symbols": [{"literal":"("}, "_", "frcExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "locFrcExpr3", "symbols": ["frcExpr3"], "postprocess": (d,loc,_) => [d[0],loc]},
    {"name": "intExpr1", "symbols": ["intExpr1", "_", {"literal":"+"}, "_", "intExpr2"], "postprocess": d => d[0] + d[4]},
    {"name": "intExpr1", "symbols": ["intExpr1", "_", {"literal":"-"}, "_", "intExpr2"], "postprocess": d => d[0] - d[4]},
    {"name": "intExpr1", "symbols": ["intExpr2"], "postprocess": id},
    {"name": "intExpr2", "symbols": ["intExpr2", "_", {"literal":"*"}, "_", "intExpr3"], "postprocess": d => d[0] * d[4]},
    {"name": "intExpr2", "symbols": ["intExpr3"], "postprocess": id},
    {"name": "intExpr3", "symbols": [{"literal":"-"}, "_", "intExpr4"], "postprocess": d => - d[2]},
    {"name": "intExpr3", "symbols": ["intExpr4"], "postprocess": id},
    {"name": "intExpr4", "symbols": ["intExpr5", "_", {"literal":"^"}, "_", "posInt"], "postprocess": d => Math.pow(d[0],d[4])},
    {"name": "intExpr4", "symbols": ["intExpr5"], "postprocess": id},
    {"name": "intExpr5", "symbols": ["nonNegInt"], "postprocess": d => parseInt(d[0])},
    {"name": "intExpr5", "symbols": [{"literal":"("}, "_", "intExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "decExpr1", "symbols": ["decExpr1", "_", {"literal":"+"}, "_", "decExpr2"], "postprocess": d => d[0].add(d[4])},
    {"name": "decExpr1", "symbols": ["decExpr1", "_", {"literal":"-"}, "_", "decExpr2"], "postprocess": d => d[0].sub(d[4])},
    {"name": "decExpr1", "symbols": ["decExpr2"], "postprocess": id},
    {"name": "decExpr2", "symbols": ["decExpr2", "_", {"literal":"*"}, "_", "decExpr3"], "postprocess": d => d[0].mul(d[4])},
    {"name": "decExpr2", "symbols": ["decExpr2", "_", {"literal":"/"}, "_", "locDecExpr3"], "postprocess":  function(d) { try { return d[0].div(d[4][0]); }
        catch(err) {
          throw new OtherError("Division by zero", d[4][1])
        } } },
    {"name": "decExpr2", "symbols": ["decExpr3"], "postprocess": id},
    {"name": "decExpr3", "symbols": [{"literal":"-"}, "_", "decExpr4"], "postprocess": d => d[2].neg()},
    {"name": "decExpr3", "symbols": ["decExpr4"], "postprocess": id},
    {"name": "decExpr4", "symbols": ["decimal"], "postprocess": d => Fraction(d[0])},
    {"name": "decExpr4", "symbols": [{"literal":"("}, "_", "decExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "locDecExpr3", "symbols": ["decExpr3"], "postprocess": (d,loc,_) => [d[0],loc]},
    {"name": "posInt$ebnf$1", "symbols": []},
    {"name": "posInt$ebnf$1", "symbols": ["posInt$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "posInt", "symbols": [/[1-9]/, "posInt$ebnf$1"], "postprocess": d => d[0] + d[1].join("")},
    {"name": "posIntSup$ebnf$1", "symbols": []},
    {"name": "posIntSup$ebnf$1", "symbols": ["posIntSup$ebnf$1", "sup09"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "posIntSup", "symbols": ["sup19", "posIntSup$ebnf$1"], "postprocess": d => d[0] + d[1].join("")},
    {"name": "sup09", "symbols": [{"literal":"⁰"}], "postprocess": d => "0"},
    {"name": "sup09", "symbols": ["sup19"], "postprocess": id},
    {"name": "sup19", "symbols": [{"literal":"¹"}], "postprocess": d => "1"},
    {"name": "sup19", "symbols": [{"literal":"²"}], "postprocess": d => "2"},
    {"name": "sup19", "symbols": [{"literal":"³"}], "postprocess": d => "3"},
    {"name": "sup19", "symbols": [{"literal":"⁴"}], "postprocess": d => "4"},
    {"name": "sup19", "symbols": [{"literal":"⁵"}], "postprocess": d => "5"},
    {"name": "sup19", "symbols": [{"literal":"⁶"}], "postprocess": d => "6"},
    {"name": "sup19", "symbols": [{"literal":"⁷"}], "postprocess": d => "7"},
    {"name": "sup19", "symbols": [{"literal":"⁸"}], "postprocess": d => "8"},
    {"name": "sup19", "symbols": [{"literal":"⁹"}], "postprocess": d => "9"},
    {"name": "posIntSub$ebnf$1", "symbols": []},
    {"name": "posIntSub$ebnf$1", "symbols": ["posIntSub$ebnf$1", "sub09"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "posIntSub", "symbols": ["sub19", "posIntSub$ebnf$1"], "postprocess": d => d[0] + d[1].join("")},
    {"name": "sub09", "symbols": [{"literal":"₀"}], "postprocess": d => "0"},
    {"name": "sub09", "symbols": ["sub19"], "postprocess": id},
    {"name": "sub19", "symbols": [{"literal":"₁"}], "postprocess": d => "1"},
    {"name": "sub19", "symbols": [{"literal":"₂"}], "postprocess": d => "2"},
    {"name": "sub19", "symbols": [{"literal":"₃"}], "postprocess": d => "3"},
    {"name": "sub19", "symbols": [{"literal":"₄"}], "postprocess": d => "4"},
    {"name": "sub19", "symbols": [{"literal":"₅"}], "postprocess": d => "5"},
    {"name": "sub19", "symbols": [{"literal":"₆"}], "postprocess": d => "6"},
    {"name": "sub19", "symbols": [{"literal":"₇"}], "postprocess": d => "7"},
    {"name": "sub19", "symbols": [{"literal":"₈"}], "postprocess": d => "8"},
    {"name": "sub19", "symbols": [{"literal":"₉"}], "postprocess": d => "9"},
    {"name": "nonNegInt", "symbols": [{"literal":"0"}], "postprocess": _ => "0"},
    {"name": "nonNegInt", "symbols": ["posInt"], "postprocess": id},
    {"name": "int$ebnf$1", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "int$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "int", "symbols": ["int$ebnf$1", "nonNegInt"], "postprocess": d => (d[0] || "") + d[1]},
    {"name": "decimal$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "decimal$ebnf$1", "symbols": ["decimal$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "decimal$ebnf$2$subexpression$1$ebnf$1", "symbols": []},
    {"name": "decimal$ebnf$2$subexpression$1$ebnf$1", "symbols": ["decimal$ebnf$2$subexpression$1$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "decimal$ebnf$2$subexpression$1$ebnf$2$subexpression$1$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "decimal$ebnf$2$subexpression$1$ebnf$2$subexpression$1$ebnf$1", "symbols": ["decimal$ebnf$2$subexpression$1$ebnf$2$subexpression$1$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "decimal$ebnf$2$subexpression$1$ebnf$2$subexpression$1", "symbols": [{"literal":"("}, "decimal$ebnf$2$subexpression$1$ebnf$2$subexpression$1$ebnf$1", {"literal":")"}]},
    {"name": "decimal$ebnf$2$subexpression$1$ebnf$2", "symbols": ["decimal$ebnf$2$subexpression$1$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "decimal$ebnf$2$subexpression$1$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "decimal$ebnf$2$subexpression$1", "symbols": [{"literal":"."}, "decimal$ebnf$2$subexpression$1$ebnf$1", "decimal$ebnf$2$subexpression$1$ebnf$2"]},
    {"name": "decimal$ebnf$2", "symbols": ["decimal$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "decimal$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "decimal", "symbols": ["decimal$ebnf$1", "decimal$ebnf$2"], "postprocess":  d => d[0].join("") + (d[1] ? "." + d[1][1].join("")
              + (d[1][2] ? "("+d[1][2][1].join("")+")"
                         : "")
        : "") },
    {"name": "hertz$string$1", "symbols": [{"literal":"h"}, {"literal":"z"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "hertz", "symbols": ["hertz$string$1"]},
    {"name": "hertz$string$2", "symbols": [{"literal":"H"}, {"literal":"z"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "hertz", "symbols": ["hertz$string$2"]},
    {"name": "ordinal$string$1", "symbols": [{"literal":"1"}, {"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ordinal", "symbols": ["ordinal$string$1"], "postprocess": d => "1"},
    {"name": "ordinal$string$2", "symbols": [{"literal":"2"}, {"literal":"n"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ordinal", "symbols": ["ordinal$string$2"], "postprocess": d => "2"},
    {"name": "ordinal$string$3", "symbols": [{"literal":"3"}, {"literal":"r"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ordinal", "symbols": ["ordinal$string$3"], "postprocess": d => "3"},
    {"name": "ordinal$string$4", "symbols": [{"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ordinal", "symbols": [/[4-9]/, "ordinal$string$4"], "postprocess": d => d[0]},
    {"name": "ordinal$ebnf$1", "symbols": ["posInt"], "postprocess": id},
    {"name": "ordinal$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ordinal$string$5", "symbols": [{"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ordinal", "symbols": ["ordinal$ebnf$1", {"literal":"1"}, /[0-9]/, "ordinal$string$5"], "postprocess": d => (d[0] || "") + "1" + d[2]},
    {"name": "ordinal$ebnf$2", "symbols": ["posInt"], "postprocess": id},
    {"name": "ordinal$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ordinal", "symbols": ["ordinal$ebnf$2", /[2-9]/, "ordinalOnesDigit"], "postprocess": d => (d[0] || "") + d[1] + d[2]},
    {"name": "ordinal", "symbols": ["posInt", {"literal":"0"}, "ordinalOnesDigit"], "postprocess": d => d[0] + "0" + d[2]},
    {"name": "ordinalOnesDigit$string$1", "symbols": [{"literal":"0"}, {"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ordinalOnesDigit", "symbols": ["ordinalOnesDigit$string$1"], "postprocess": d => "0"},
    {"name": "ordinalOnesDigit$string$2", "symbols": [{"literal":"1"}, {"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ordinalOnesDigit", "symbols": ["ordinalOnesDigit$string$2"], "postprocess": d => "1"},
    {"name": "ordinalOnesDigit$string$3", "symbols": [{"literal":"2"}, {"literal":"n"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ordinalOnesDigit", "symbols": ["ordinalOnesDigit$string$3"], "postprocess": d => "2"},
    {"name": "ordinalOnesDigit$string$4", "symbols": [{"literal":"3"}, {"literal":"r"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ordinalOnesDigit", "symbols": ["ordinalOnesDigit$string$4"], "postprocess": d => "3"},
    {"name": "ordinalOnesDigit$string$5", "symbols": [{"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ordinalOnesDigit", "symbols": [/[4-9]/, "ordinalOnesDigit$string$5"], "postprocess": d => d[0]}
]
  , ParserStart: "top1"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
