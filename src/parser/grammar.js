// Generated automatically by nearley, version 2.19.8
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }


const Fraction = require('fraction.js');
const Interval = require('../interval.js');
const {pySymb, pyInterval, redDeg, octaveOfIntvToA4} = require('../pythagorean.js');
const {fjsFactor} = require('../fjs.js');
const {edoPy, edoHasNeutrals, edoHasSemiNeutrals} = require('../edo.js');
const helpers = require('./grammar-helpers.js');

var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": id},
    {"name": "top1", "symbols": ["_", "top2", "_"], "postprocess":  function (d) { const r = { intvToA4: Interval(1)
                  , hertz: Interval(440) };
        return d[1](r).concat(r); } },
    {"name": "top1$string$1", "symbols": [{"literal":"w"}, {"literal":"h"}, {"literal":"e"}, {"literal":"r"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "top1$ebnf$1", "symbols": ["hertz"], "postprocess": id},
    {"name": "top1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "top1", "symbols": ["_", "top2", "__", "top1$string$1", "__", "pyNote", "_", {"literal":"="}, "_", "decimal", "top1$ebnf$1", "_"], "postprocess":  function (d) { const r = { intvToA4: d[5](Interval(1))
                  , hertz: Interval(d[9]) };
        return d[1](r).concat(r); } },
    {"name": "top1$string$2", "symbols": [{"literal":"w"}, {"literal":"h"}, {"literal":"e"}, {"literal":"r"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "top1", "symbols": ["_", "top2", "__", "top1$string$2", "__", "pyNote", "_", {"literal":"="}, "_", "pyNote", "_", {"literal":"\\"}, "_", "posInt", "_"], "postprocess":  function (d,_,reject) {
        if (!d[5](Interval(1)).equals(d[9](Interval(1)))) { return reject; }
        const s = edoPy(parseInt(d[13]),d[9](Interval(1)));
        const r = { intvToA4: d[5](Interval(1))
                  , hertz: Interval(2).pow(s,d[13]).mul(440) };
        return d[1](r).concat(r); } },
    {"name": "top2", "symbols": ["topIntv"], "postprocess": id},
    {"name": "top2", "symbols": ["topNote"], "postprocess": id},
    {"name": "topIntv", "symbols": ["intvSExpr1"], "postprocess": d => _ => ["interval", true, d[0], null]},
    {"name": "topIntv", "symbols": ["intvMExpr1"], "postprocess": d => r => ["interval", false, d[0](r), null]},
    {"name": "topIntv", "symbols": ["intvAExpr1"], "postprocess": d => r => ["interval", false, d[0](r)[0], d[0](r)[1]]},
    {"name": "topNote", "symbols": ["noteSExpr1"], "postprocess": d => r => ["note", true, d[0](r.intvToA4), null]},
    {"name": "topNote", "symbols": ["noteMExpr1"], "postprocess": d => r => ["note", false, d[0](r), null]},
    {"name": "topNote", "symbols": ["noteAExpr1"], "postprocess": d => r => ["note", false, d[0](r)[0], d[0](r)[1]]},
    {"name": "intvMExpr1", "symbols": ["intvMExpr1", "_", {"literal":"*"}, "_", "intvMExpr2"], "postprocess": d => r => d[0](r).mul(d[4](r))},
    {"name": "intvMExpr1", "symbols": ["intvMExpr1", "_", {"literal":"/"}, "_", "intvMExpr2"], "postprocess": d => r => d[0](r).div(d[4](r))},
    {"name": "intvMExpr1", "symbols": ["noteMExpr1", "_", {"literal":"/"}, "_", "noteMExpr2"], "postprocess": d => r => d[0](r).div(d[4](r))},
    {"name": "intvMExpr1", "symbols": ["intvMExpr2"], "postprocess": id},
    {"name": "intvMExpr2", "symbols": ["intvMExpr3", "_", {"literal":"^"}, "_", "frcExpr3"], "postprocess": d => r => d[0](r).pow(d[4])},
    {"name": "intvMExpr2$string$1", "symbols": [{"literal":"s"}, {"literal":"q"}, {"literal":"r"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2", "symbols": ["intvMExpr2$string$1", "_", {"literal":"("}, "_", "intvMExpr1", "_", {"literal":")"}], "postprocess": d => r => d[4](r).sqrt()},
    {"name": "intvMExpr2$string$2", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2", "symbols": ["intvMExpr2$string$2", "_", {"literal":"("}, "_", "intvMExpr1", "_", {"literal":")"}], "postprocess": d => r => d[4](r).red()},
    {"name": "intvMExpr2$string$3", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2", "symbols": ["intvMExpr2$string$3", "_", {"literal":"("}, "_", "intvMExpr1", "_", {"literal":")"}], "postprocess": d => r => d[4](r).reb()},
    {"name": "intvMExpr2$string$4", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2", "symbols": ["intvMExpr2$string$4", "_", {"literal":"("}, "_", "intvMExpr1", "_", {"literal":","}, "_", "intvMExpr1", "_", {"literal":")"}], "postprocess": d => r => d[4](r).red(d[8](r))},
    {"name": "intvMExpr2$string$5", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvMExpr2", "symbols": ["intvMExpr2$string$5", "_", {"literal":"("}, "_", "intvMExpr1", "_", {"literal":","}, "_", "intvMExpr1", "_", {"literal":")"}], "postprocess": d => r => d[4](r).reb(d[8](r))},
    {"name": "intvMExpr2", "symbols": ["intvSymbol"], "postprocess": d => _ => d[0]},
    {"name": "intvMExpr2", "symbols": ["intvMExpr3"], "postprocess": id},
    {"name": "intvMExpr3", "symbols": ["posInt"], "postprocess": d => _ => Interval(d[0])},
    {"name": "intvMExpr3", "symbols": [{"literal":"("}, "_", "intvMExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "noteMExpr1", "symbols": ["noteMExpr1", "_", {"literal":"*"}, "_", "intvMExpr2"], "postprocess": d => r => d[0](r).mul(d[4](r))},
    {"name": "noteMExpr1", "symbols": ["intvMExpr1", "_", {"literal":"*"}, "_", "noteMExpr2"], "postprocess": d => r => d[0](r).mul(d[4](r))},
    {"name": "noteMExpr1", "symbols": ["noteMExpr1", "_", {"literal":"/"}, "_", "intvMExpr2"], "postprocess": d => r => d[0](r).div(d[4](r))},
    {"name": "noteMExpr1", "symbols": ["noteMExpr2"], "postprocess": id},
    {"name": "noteMExpr2", "symbols": ["noteSymbol"], "postprocess": d => r => d[0](r.intvToA4)},
    {"name": "noteMExpr2", "symbols": ["decimal", "hertz"], "postprocess": d => r => Interval(d[0]).div(r.hertz)},
    {"name": "noteMExpr2", "symbols": [{"literal":"("}, "_", "noteMExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "intvAExpr1", "symbols": ["intvAExpr1", "_", {"literal":"+"}, "_", "intvAExpr2"], "postprocess": d => r => [d[0](r)[0].mul(d[4](r)[0]), helpers.cbnEDOs(d[0](r)[1],d[4](r)[1])]},
    {"name": "intvAExpr1", "symbols": ["intvAExpr1", "_", {"literal":"-"}, "_", "intvAExpr2"], "postprocess": d => r => [d[0](r)[0].div(d[4](r)[0]), helpers.cbnEDOs(d[0](r)[1],d[4](r)[1])]},
    {"name": "intvAExpr1", "symbols": ["noteAExpr1", "_", {"literal":"-"}, "_", "noteAExpr2"], "postprocess": d => r => [d[0](r)[0].div(d[4](r)[0]), helpers.cbnEDOs(d[0](r)[1],d[4](r)[1])]},
    {"name": "intvAExpr1", "symbols": ["intvAExpr2"], "postprocess": id},
    {"name": "intvAExpr2", "symbols": ["intvAExpr3", "_", {"literal":"x"}, "_", "frcExpr3"], "postprocess": d => r => [d[0](r)[0].pow(d[4]), d[0](r)[1]]},
    {"name": "intvAExpr2", "symbols": ["frcExpr3", "_", {"literal":"x"}, "_", "intvAExpr3"], "postprocess": d => r => [d[4](r)[0].pow(d[0]), d[4](r)[1]]},
    {"name": "intvAExpr2", "symbols": ["intvAExpr3"], "postprocess": id},
    {"name": "intvAExpr3$string$1", "symbols": [{"literal":"c"}, {"literal":"e"}, {"literal":"n"}, {"literal":"t"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3", "symbols": ["intvAExpr3$string$1", "_", {"literal":"("}, "_", "intvMExpr1", "_", {"literal":")"}], "postprocess": d => r => [d[4](r), null]},
    {"name": "intvAExpr3$string$2", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3", "symbols": ["intvAExpr3$string$2", "_", {"literal":"("}, "_", "intvAExpr1", "_", {"literal":")"}], "postprocess": d => r => [d[4](r)[0].red(), d[4](r)[1]]},
    {"name": "intvAExpr3$string$3", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3", "symbols": ["intvAExpr3$string$3", "_", {"literal":"("}, "_", "intvAExpr1", "_", {"literal":")"}], "postprocess": d => r => [d[4](r)[0].reb(), d[4](r)[1]]},
    {"name": "intvAExpr3$string$4", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3", "symbols": ["intvAExpr3$string$4", "_", {"literal":"("}, "_", "intvAExpr1", "_", {"literal":","}, "_", "intvMExpr1", "_", {"literal":")"}], "postprocess": d => r => [d[4](r)[0].red(d[8](r)), d[8](r).equals(2) ? d[4](r)[1] : null]},
    {"name": "intvAExpr3$string$5", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvAExpr3", "symbols": ["intvAExpr3$string$5", "_", {"literal":"("}, "_", "intvAExpr1", "_", {"literal":","}, "_", "intvMExpr1", "_", {"literal":")"}], "postprocess": d => r => [d[4](r)[0].reb(d[8](r)), d[8](r).equals(2) ? d[4](r)[1] : null]},
    {"name": "intvAExpr3", "symbols": ["intvSymbol"], "postprocess": d => _ => [d[0], null]},
    {"name": "intvAExpr3", "symbols": ["decimal", {"literal":"c"}], "postprocess":  d => function () {
        const d0 = Fraction(d[0]).div(1200);
        return [Interval(2).pow(d0), d0.mul(48).d == 1 ? d0.d : null] } },
    {"name": "intvAExpr3", "symbols": ["intvEDOExpr3", "_", {"literal":"\\"}, "_", "posInt"], "postprocess":  (d,_,reject) => function (r) {
        const d0 = d[0]({intvToA4: r.intvToA4, edo: d[4]});
        if (d0 == reject) { return reject; }
        else { return [Interval(2).pow(d0).pow(1,d[4]), d[4]] } } },
    {"name": "intvAExpr3", "symbols": [{"literal":"("}, "_", "intvAExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "noteAExpr1", "symbols": ["noteAExpr1", "_", {"literal":"+"}, "_", "intvAExpr2"], "postprocess": d => r => [d[0](r)[0].mul(d[4](r)[0]), helpers.cbnEDOs(d[0](r)[1],d[4](r)[1])]},
    {"name": "noteAExpr1", "symbols": ["intvAExpr1", "_", {"literal":"+"}, "_", "noteAExpr2"], "postprocess": d => r => [d[0](r)[0].mul(d[4](r)[0]), helpers.cbnEDOs(d[0](r)[1],d[4](r)[1])]},
    {"name": "noteAExpr1", "symbols": ["noteAExpr1", "_", {"literal":"-"}, "_", "intvAExpr2"], "postprocess": d => r => [d[0](r)[0].div(d[4](r)[0]), helpers.cbnEDOs(d[0](r)[1],d[4](r)[1])]},
    {"name": "noteAExpr1", "symbols": ["noteAExpr2"], "postprocess": id},
    {"name": "noteAExpr2", "symbols": ["noteSymbol"], "postprocess": d => r => [d[0](r.intvToA4), null]},
    {"name": "noteAExpr2", "symbols": ["noteEDOExpr2", "_", {"literal":"\\"}, "_", "posInt"], "postprocess":  (d,_,reject) => function (r) {
        const d0 = d[0]({intvToA4: r.intvToA4, edo: d[4]});
        if (d0 == reject) { return reject; }
        else { return [Interval(2).pow(d0).pow(1,d[4]), d[4]] } } },
    {"name": "noteAExpr2", "symbols": [{"literal":"("}, "_", "noteAExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "intvEDOExpr1", "symbols": ["intvEDOExpr1", "_", {"literal":"+"}, "_", "intvEDOExpr2"], "postprocess": d => r => d[0](r) + d[4](r)},
    {"name": "intvEDOExpr1", "symbols": ["intvEDOExpr1", "_", {"literal":"-"}, "_", "intvEDOExpr2"], "postprocess": d => r => d[0](r) - d[4](r)},
    {"name": "intvEDOExpr1", "symbols": ["noteEDOExpr1", "_", {"literal":"-"}, "_", "noteEDOExpr2"], "postprocess": d => r => d[0](r) - d[4](r)},
    {"name": "intvEDOExpr1", "symbols": ["intvEDOExpr2"], "postprocess": id},
    {"name": "intvEDOExpr2", "symbols": ["intvEDOExpr3", "_", {"literal":"x"}, "_", "intExpr1"], "postprocess": d => r => d[0](r) * d[4]},
    {"name": "intvEDOExpr2", "symbols": ["intExpr1", "_", {"literal":"x"}, "_", "intvEDOExpr3"], "postprocess": d => r => d[0] * d[4](r)},
    {"name": "intvEDOExpr2", "symbols": ["intvEDOExpr3"], "postprocess": id},
    {"name": "intvEDOExpr3", "symbols": [{"literal":"-"}, "_", "intvEDOExpr4"], "postprocess": d => r => - d[2](r)},
    {"name": "intvEDOExpr3", "symbols": ["intvEDOExpr4"], "postprocess": id},
    {"name": "intvEDOExpr4", "symbols": ["posInt"], "postprocess": d => _ => parseInt(d[0])},
    {"name": "intvEDOExpr4", "symbols": ["upsDns", "pyIntv"], "postprocess": d => r => d[0] + edoPy(r.edo,d[1])},
    {"name": "intvEDOExpr4", "symbols": ["upsDns", "npyIntv"], "postprocess":  (d,_,reject) => r =>
        !edoHasNeutrals(r.edo) ? reject : d[0] + edoPy(r.edo,d[1]) },
    {"name": "intvEDOExpr4", "symbols": ["upsDns", "snpyIntv"], "postprocess":  (d,_,reject) => r =>
        !edoHasSemiNeutrals(r.edo) ? reject : d[0] + edoPy(r.edo,d[1]) },
    {"name": "intvEDOExpr4", "symbols": ["upsDns", {"literal":"~"}, "posInt"], "postprocess":  (d,_,reject) => r =>
        !edoHasNeutrals(r.edo) || redDeg(d[2]) == 1 ? reject :
          redDeg(d[2]) == 4 ? d[0] + edoPy(r.edo,pyInterval(d[2],1,2)) :
          redDeg(d[2]) == 5 ? d[0] + edoPy(r.edo,pyInterval(d[2],-1,2)) :
                              d[0] + edoPy(r.edo,pyInterval(d[2],0)) },
    {"name": "intvEDOExpr4$string$1", "symbols": [{"literal":"T"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvEDOExpr4", "symbols": ["intvEDOExpr4$string$1"], "postprocess": (d,_,reject) => r => r.edo % 2 == 0 ? r.edo/2 : reject},
    {"name": "intvEDOExpr4", "symbols": [{"literal":"("}, "_", "intvEDOExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "upsDns", "symbols": [], "postprocess": d => 0},
    {"name": "upsDns$ebnf$1", "symbols": [{"literal":"^"}]},
    {"name": "upsDns$ebnf$1", "symbols": ["upsDns$ebnf$1", {"literal":"^"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "upsDns", "symbols": ["upsDns$ebnf$1"], "postprocess": d => d[0].length},
    {"name": "upsDns$ebnf$2", "symbols": [{"literal":"v"}]},
    {"name": "upsDns$ebnf$2", "symbols": ["upsDns$ebnf$2", {"literal":"v"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "upsDns", "symbols": ["upsDns$ebnf$2"], "postprocess": d => - d[0].length},
    {"name": "noteEDOExpr1", "symbols": ["noteEDOExpr1", "_", {"literal":"+"}, "_", "intvEDOExpr2"], "postprocess": d => r => d[0](r) + d[4](r)},
    {"name": "noteEDOExpr1", "symbols": ["intvEDOExpr1", "_", {"literal":"+"}, "_", "noteEDOExpr2"], "postprocess": d => r => d[0](r) + d[4](r)},
    {"name": "noteEDOExpr1", "symbols": ["noteEDOExpr1", "_", {"literal":"-"}, "_", "intvEDOExpr2"], "postprocess": d => r => d[0](r) - d[4](r)},
    {"name": "noteEDOExpr1", "symbols": ["noteEDOExpr2"], "postprocess": id},
    {"name": "noteEDOExpr2", "symbols": ["upsDns", "pyNote"], "postprocess": d => r => d[0] + edoPy(r.edo,d[1](r.intvToA4))},
    {"name": "noteEDOExpr2", "symbols": ["upsDns", "npyNote"], "postprocess":  (d,_,reject) => r =>
        !edoHasNeutrals(r.edo) ? reject : d[0] + edoPy(r.edo,d[1](r.intvToA4)) },
    {"name": "noteEDOExpr2", "symbols": [{"literal":"("}, "_", "noteEDOExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "intvSExpr1$string$1", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSExpr1", "symbols": ["intvSExpr1$string$1", "_", {"literal":"("}, "_", "intvSExpr1", "_", {"literal":")"}], "postprocess": d => d[4].red()},
    {"name": "intvSExpr1$string$2", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSExpr1", "symbols": ["intvSExpr1$string$2", "_", {"literal":"("}, "_", "intvSExpr1", "_", {"literal":")"}], "postprocess": d => d[4].reb()},
    {"name": "intvSExpr1$string$3", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSExpr1", "symbols": ["intvSExpr1$string$3", "_", {"literal":"("}, "_", "intvSExpr1", "_", {"literal":","}, "_", "intvMExpr1", "_", {"literal":")"}], "postprocess": d => d[4].red(d[8])},
    {"name": "intvSExpr1$string$4", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSExpr1", "symbols": ["intvSExpr1$string$4", "_", {"literal":"("}, "_", "intvSExpr1", "_", {"literal":","}, "_", "intvMExpr1", "_", {"literal":")"}], "postprocess": d => d[4].reb(d[8])},
    {"name": "intvSExpr1", "symbols": ["intvSExpr2"], "postprocess": id},
    {"name": "intvSExpr2", "symbols": ["intvSymbol"], "postprocess": id},
    {"name": "intvSExpr2", "symbols": [{"literal":"("}, "_", "intvSExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "intvSymbol", "symbols": ["fjsIntv"], "postprocess": id},
    {"name": "intvSymbol", "symbols": ["npyIntv"], "postprocess": id},
    {"name": "intvSymbol", "symbols": ["snpyIntv"], "postprocess": id},
    {"name": "intvSymbol$string$1", "symbols": [{"literal":"T"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "intvSymbol", "symbols": ["intvSymbol$string$1"], "postprocess": _ => Interval(2).sqrt()},
    {"name": "noteSExpr1", "symbols": ["noteSymbol"], "postprocess": id},
    {"name": "noteSExpr1", "symbols": [{"literal":"("}, "_", "noteSExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "noteSymbol", "symbols": ["fjsNote"], "postprocess": id},
    {"name": "noteSymbol", "symbols": ["npyNote"], "postprocess": id},
    {"name": "fjsIntv", "symbols": ["pyIntv"], "postprocess": id},
    {"name": "fjsIntv", "symbols": ["fjsIntv", {"literal":"^"}, "fjsAccs"], "postprocess": d => d[0].mul(d[2])},
    {"name": "fjsIntv", "symbols": ["fjsIntv", {"literal":"_"}, "fjsAccs"], "postprocess": d => d[0].div(d[2])},
    {"name": "fjsNote", "symbols": ["pyNote"], "postprocess": id},
    {"name": "fjsNote", "symbols": ["fjsNote", {"literal":"^"}, "fjsAccs"], "postprocess": d => refIntvToA4 => d[0](refIntvToA4).mul(d[2])},
    {"name": "fjsNote", "symbols": ["fjsNote", {"literal":"_"}, "fjsAccs"], "postprocess": d => refIntvToA4 => d[0](refIntvToA4).div(d[2])},
    {"name": "fjsAccs", "symbols": ["fjsAcc"], "postprocess": d => fjsFactor(d[0])},
    {"name": "fjsAccs", "symbols": ["fjsAccs", {"literal":","}, "fjsAcc"], "postprocess": d => d[0].mul(fjsFactor(d[2]))},
    {"name": "fjsAcc", "symbols": ["posInt"], "postprocess": (d,_,reject) => helpers.ensureNo2Or3(Interval(d[0]),reject)},
    {"name": "fjsAcc$string$1", "symbols": [{"literal":"s"}, {"literal":"q"}, {"literal":"r"}, {"literal":"t"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "fjsAcc", "symbols": ["fjsAcc$string$1", "fjsAcc", {"literal":")"}], "postprocess": d => d[1].sqrt()},
    {"name": "fjsAcc$string$2", "symbols": [{"literal":"r"}, {"literal":"o"}, {"literal":"o"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "fjsAcc", "symbols": ["fjsAcc$string$2", "posInt", {"literal":"("}, "fjsAcc", {"literal":")"}], "postprocess": d => d[3].root(d[1])},
    {"name": "fjsAcc", "symbols": [{"literal":"("}, "fjsAcc", {"literal":"^"}, "frcExpr3", {"literal":")"}], "postprocess": d => d[1].pow(d[3])},
    {"name": "pyIntv", "symbols": [{"literal":"P"}, "pyDeg"], "postprocess": (d,_,reject) => helpers.perfPyInterval(d[1],0,reject)},
    {"name": "pyIntv", "symbols": [{"literal":"M"}, "pyDeg"], "postprocess": (d,_,reject) => helpers.nonPerfPyInterval(d[1],Fraction(1,2),reject)},
    {"name": "pyIntv", "symbols": [{"literal":"m"}, "pyDeg"], "postprocess": (d,_,reject) => helpers.nonPerfPyInterval(d[1],Fraction(-1,2),reject)},
    {"name": "pyIntv$ebnf$1", "symbols": [{"literal":"A"}]},
    {"name": "pyIntv$ebnf$1", "symbols": ["pyIntv$ebnf$1", {"literal":"A"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyIntv", "symbols": ["pyIntv$ebnf$1", "pyDeg"], "postprocess": (d,_,reject) => helpers.augOrDimPyInterval(d[1],d[0].length,1,reject)},
    {"name": "pyIntv$ebnf$2", "symbols": [{"literal":"d"}]},
    {"name": "pyIntv$ebnf$2", "symbols": ["pyIntv$ebnf$2", {"literal":"d"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyIntv", "symbols": ["pyIntv$ebnf$2", "pyDeg"], "postprocess": (d,_,reject) => helpers.augOrDimPyInterval(d[1],-d[0].length,1,reject)},
    {"name": "pyIntv", "symbols": ["posInt", {"literal":"A"}, "pyDeg"], "postprocess": (d,_,reject) => helpers.augOrDimPyInterval(d[2],d[0],1,reject)},
    {"name": "pyIntv", "symbols": ["posInt", {"literal":"d"}, "pyDeg"], "postprocess": (d,_,reject) => helpers.augOrDimPyInterval(d[2],d[0],1,reject)},
    {"name": "npyIntv$subexpression$1", "symbols": [/[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "npyIntv", "symbols": ["npyIntv$subexpression$1", "pyDeg"], "postprocess": (d,_,reject) => helpers.nonPerfPyInterval(d[1],0,reject)},
    {"name": "npyIntv$string$1", "symbols": [{"literal":"s"}, {"literal":"A"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyIntv", "symbols": ["npyIntv$string$1", "pyDeg"], "postprocess": (d,_,reject) => helpers.augOrDimPyInterval(d[1],1,2,reject)},
    {"name": "npyIntv$string$2", "symbols": [{"literal":"s"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyIntv", "symbols": ["npyIntv$string$2", "pyDeg"], "postprocess": (d,_,reject) => helpers.augOrDimPyInterval(d[1],-1,2,reject)},
    {"name": "npyIntv$string$3", "symbols": [{"literal":"/"}, {"literal":"2"}, {"literal":"-"}, {"literal":"A"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyIntv", "symbols": ["posInt", "npyIntv$string$3", "pyDeg"], "postprocess": (d,_,reject) => helpers.augOrDimPyInterval(d[2],d[0],2,reject)},
    {"name": "npyIntv$string$4", "symbols": [{"literal":"/"}, {"literal":"2"}, {"literal":"-"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyIntv", "symbols": ["posInt", "npyIntv$string$4", "pyDeg"], "postprocess": (d,_,reject) => helpers.augOrDimPyInterval(d[2],d[0],2,reject)},
    {"name": "snpyIntv$string$1", "symbols": [{"literal":"s"}, {"literal":"M"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "snpyIntv", "symbols": ["snpyIntv$string$1", "pyDeg"], "postprocess": (d,_,reject) => helpers.nonPerfPyInterval(d[1],Fraction(1,4),reject)},
    {"name": "snpyIntv$string$2", "symbols": [{"literal":"s"}, {"literal":"m"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "snpyIntv", "symbols": ["snpyIntv$string$2", "pyDeg"], "postprocess": (d,_,reject) => helpers.nonPerfPyInterval(d[1],Fraction(-1,4),reject)},
    {"name": "snpyIntv$string$3", "symbols": [{"literal":"/"}, {"literal":"4"}, {"literal":"-"}, {"literal":"A"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "snpyIntv", "symbols": ["posInt", "snpyIntv$string$3", "pyDeg"], "postprocess": (d,_,reject) => helpers.augOrDimPyInterval(d[2],d[0],4,reject)},
    {"name": "snpyIntv$string$4", "symbols": [{"literal":"/"}, {"literal":"4"}, {"literal":"-"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "snpyIntv", "symbols": ["posInt", "snpyIntv$string$4", "pyDeg"], "postprocess": (d,_,reject) => helpers.augOrDimPyInterval(d[2],d[0],4,reject)},
    {"name": "pyDeg", "symbols": ["posInt"], "postprocess": d => parseInt(d[0])},
    {"name": "pyDeg", "symbols": [{"literal":"-"}, "posInt"], "postprocess": d => - parseInt(d[1])},
    {"name": "pyNote", "symbols": [{"literal":"A"}], "postprocess": _ => refIntvToA4 => refIntvToA4.recip()},
    {"name": "pyNote$macrocall$2", "symbols": [/[B-G]/]},
    {"name": "pyNote$macrocall$3", "symbols": ["pyNoteNoAccs"]},
    {"name": "pyNote$macrocall$1$ebnf$1", "symbols": ["int"], "postprocess": id},
    {"name": "pyNote$macrocall$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "pyNote$macrocall$1", "symbols": ["pyNote$macrocall$2", "pyNote$macrocall$3", "pyNote$macrocall$1$ebnf$1"], "postprocess":  d => function(refIntvToA4) {
        const d2 = d[2] ? parseInt(d[2]) : 4;
        return helpers.baseNoteIntvToReference(d[0], refIntvToA4)
                        .mul(d[1][0])
                        .mul(Interval(2).pow(d2 - 4)); } },
    {"name": "pyNote", "symbols": ["pyNote$macrocall$1"], "postprocess": id},
    {"name": "pyNote$macrocall$5", "symbols": [/[A-G]/]},
    {"name": "pyNote$macrocall$6", "symbols": ["pyNoteAccs"]},
    {"name": "pyNote$macrocall$4$ebnf$1", "symbols": ["int"], "postprocess": id},
    {"name": "pyNote$macrocall$4$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "pyNote$macrocall$4", "symbols": ["pyNote$macrocall$5", "pyNote$macrocall$6", "pyNote$macrocall$4$ebnf$1"], "postprocess":  d => function(refIntvToA4) {
        const d2 = d[2] ? parseInt(d[2]) : 4;
        return helpers.baseNoteIntvToReference(d[0], refIntvToA4)
                        .mul(d[1][0])
                        .mul(Interval(2).pow(d2 - 4)); } },
    {"name": "pyNote", "symbols": ["pyNote$macrocall$4"], "postprocess": id},
    {"name": "pyNoteNoAccs", "symbols": [], "postprocess": _ => Interval(1)},
    {"name": "pyNoteAccs", "symbols": [{"literal":"♮"}], "postprocess": _ => Interval(1)},
    {"name": "pyNoteAccs$ebnf$1$subexpression$1", "symbols": [{"literal":"♯"}]},
    {"name": "pyNoteAccs$ebnf$1$subexpression$1", "symbols": [{"literal":"#"}]},
    {"name": "pyNoteAccs$ebnf$1", "symbols": ["pyNoteAccs$ebnf$1$subexpression$1"]},
    {"name": "pyNoteAccs$ebnf$1$subexpression$2", "symbols": [{"literal":"♯"}]},
    {"name": "pyNoteAccs$ebnf$1$subexpression$2", "symbols": [{"literal":"#"}]},
    {"name": "pyNoteAccs$ebnf$1", "symbols": ["pyNoteAccs$ebnf$1", "pyNoteAccs$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyNoteAccs", "symbols": ["pyNoteAccs$ebnf$1"], "postprocess": d => pyInterval(1, d[0].length)},
    {"name": "pyNoteAccs$ebnf$2$subexpression$1$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd2a"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyNoteAccs$ebnf$2$subexpression$1", "symbols": ["pyNoteAccs$ebnf$2$subexpression$1$string$1"]},
    {"name": "pyNoteAccs$ebnf$2$subexpression$1", "symbols": [{"literal":"X"}]},
    {"name": "pyNoteAccs$ebnf$2", "symbols": ["pyNoteAccs$ebnf$2$subexpression$1"]},
    {"name": "pyNoteAccs$ebnf$2$subexpression$2$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd2a"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyNoteAccs$ebnf$2$subexpression$2", "symbols": ["pyNoteAccs$ebnf$2$subexpression$2$string$1"]},
    {"name": "pyNoteAccs$ebnf$2$subexpression$2", "symbols": [{"literal":"X"}]},
    {"name": "pyNoteAccs$ebnf$2", "symbols": ["pyNoteAccs$ebnf$2", "pyNoteAccs$ebnf$2$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyNoteAccs$ebnf$3", "symbols": []},
    {"name": "pyNoteAccs$ebnf$3$subexpression$1", "symbols": [{"literal":"♯"}]},
    {"name": "pyNoteAccs$ebnf$3$subexpression$1", "symbols": [{"literal":"#"}]},
    {"name": "pyNoteAccs$ebnf$3", "symbols": ["pyNoteAccs$ebnf$3", "pyNoteAccs$ebnf$3$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyNoteAccs", "symbols": ["pyNoteAccs$ebnf$2", "pyNoteAccs$ebnf$3"], "postprocess": d => pyInterval(1, 2*d[0].length + d[1].length)},
    {"name": "pyNoteAccs$ebnf$4$subexpression$1", "symbols": [{"literal":"♭"}]},
    {"name": "pyNoteAccs$ebnf$4$subexpression$1", "symbols": [{"literal":"b"}]},
    {"name": "pyNoteAccs$ebnf$4", "symbols": ["pyNoteAccs$ebnf$4$subexpression$1"]},
    {"name": "pyNoteAccs$ebnf$4$subexpression$2", "symbols": [{"literal":"♭"}]},
    {"name": "pyNoteAccs$ebnf$4$subexpression$2", "symbols": [{"literal":"b"}]},
    {"name": "pyNoteAccs$ebnf$4", "symbols": ["pyNoteAccs$ebnf$4", "pyNoteAccs$ebnf$4$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyNoteAccs", "symbols": ["pyNoteAccs$ebnf$4"], "postprocess": d => pyInterval(-1, d[0].length)},
    {"name": "pyNoteAccs$ebnf$5", "symbols": []},
    {"name": "pyNoteAccs$ebnf$5$subexpression$1", "symbols": [{"literal":"♭"}]},
    {"name": "pyNoteAccs$ebnf$5$subexpression$1", "symbols": [{"literal":"b"}]},
    {"name": "pyNoteAccs$ebnf$5", "symbols": ["pyNoteAccs$ebnf$5", "pyNoteAccs$ebnf$5$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyNoteAccs$ebnf$6$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd2b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyNoteAccs$ebnf$6", "symbols": ["pyNoteAccs$ebnf$6$string$1"]},
    {"name": "pyNoteAccs$ebnf$6$string$2", "symbols": [{"literal":"\ud834"}, {"literal":"\udd2b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pyNoteAccs$ebnf$6", "symbols": ["pyNoteAccs$ebnf$6", "pyNoteAccs$ebnf$6$string$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pyNoteAccs", "symbols": ["pyNoteAccs$ebnf$5", "pyNoteAccs$ebnf$6"], "postprocess": d => pyInterval(-1, 2*d[0].length + d[1].length)},
    {"name": "npyNote$macrocall$2", "symbols": [/[A-G]/]},
    {"name": "npyNote$macrocall$3", "symbols": ["npyNoteAccs"]},
    {"name": "npyNote$macrocall$1$ebnf$1", "symbols": ["int"], "postprocess": id},
    {"name": "npyNote$macrocall$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "npyNote$macrocall$1", "symbols": ["npyNote$macrocall$2", "npyNote$macrocall$3", "npyNote$macrocall$1$ebnf$1"], "postprocess":  d => function(refIntvToA4) {
        const d2 = d[2] ? parseInt(d[2]) : 4;
        return helpers.baseNoteIntvToReference(d[0], refIntvToA4)
                        .mul(d[1][0])
                        .mul(Interval(2).pow(d2 - 4)); } },
    {"name": "npyNote", "symbols": ["npyNote$macrocall$1"], "postprocess": id},
    {"name": "npyNoteAccs$ebnf$1", "symbols": []},
    {"name": "npyNoteAccs$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd2a"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyNoteAccs$ebnf$1$subexpression$1", "symbols": ["npyNoteAccs$ebnf$1$subexpression$1$string$1"]},
    {"name": "npyNoteAccs$ebnf$1$subexpression$1", "symbols": [{"literal":"X"}]},
    {"name": "npyNoteAccs$ebnf$1", "symbols": ["npyNoteAccs$ebnf$1", "npyNoteAccs$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "npyNoteAccs$ebnf$2", "symbols": []},
    {"name": "npyNoteAccs$ebnf$2$subexpression$1", "symbols": [{"literal":"♯"}]},
    {"name": "npyNoteAccs$ebnf$2$subexpression$1", "symbols": [{"literal":"#"}]},
    {"name": "npyNoteAccs$ebnf$2", "symbols": ["npyNoteAccs$ebnf$2", "npyNoteAccs$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "npyNoteAccs$ebnf$3$subexpression$1$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd32"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyNoteAccs$ebnf$3$subexpression$1", "symbols": ["npyNoteAccs$ebnf$3$subexpression$1$string$1"]},
    {"name": "npyNoteAccs$ebnf$3$subexpression$1", "symbols": [{"literal":"t"}]},
    {"name": "npyNoteAccs$ebnf$3", "symbols": ["npyNoteAccs$ebnf$3$subexpression$1"]},
    {"name": "npyNoteAccs$ebnf$3$subexpression$2$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd32"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyNoteAccs$ebnf$3$subexpression$2", "symbols": ["npyNoteAccs$ebnf$3$subexpression$2$string$1"]},
    {"name": "npyNoteAccs$ebnf$3$subexpression$2", "symbols": [{"literal":"t"}]},
    {"name": "npyNoteAccs$ebnf$3", "symbols": ["npyNoteAccs$ebnf$3", "npyNoteAccs$ebnf$3$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "npyNoteAccs", "symbols": ["npyNoteAccs$ebnf$1", "npyNoteAccs$ebnf$2", "npyNoteAccs$ebnf$3"], "postprocess": d => pyInterval(1, 2*d[0].length + d[1].length + 0.5*d[2].length)},
    {"name": "npyNoteAccs$ebnf$4$subexpression$1$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd33"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyNoteAccs$ebnf$4$subexpression$1", "symbols": ["npyNoteAccs$ebnf$4$subexpression$1$string$1"]},
    {"name": "npyNoteAccs$ebnf$4$subexpression$1", "symbols": [{"literal":"d"}]},
    {"name": "npyNoteAccs$ebnf$4", "symbols": ["npyNoteAccs$ebnf$4$subexpression$1"]},
    {"name": "npyNoteAccs$ebnf$4$subexpression$2$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd33"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyNoteAccs$ebnf$4$subexpression$2", "symbols": ["npyNoteAccs$ebnf$4$subexpression$2$string$1"]},
    {"name": "npyNoteAccs$ebnf$4$subexpression$2", "symbols": [{"literal":"d"}]},
    {"name": "npyNoteAccs$ebnf$4", "symbols": ["npyNoteAccs$ebnf$4", "npyNoteAccs$ebnf$4$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "npyNoteAccs$ebnf$5", "symbols": []},
    {"name": "npyNoteAccs$ebnf$5$subexpression$1", "symbols": [{"literal":"♭"}]},
    {"name": "npyNoteAccs$ebnf$5$subexpression$1", "symbols": [{"literal":"b"}]},
    {"name": "npyNoteAccs$ebnf$5", "symbols": ["npyNoteAccs$ebnf$5", "npyNoteAccs$ebnf$5$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "npyNoteAccs$ebnf$6", "symbols": []},
    {"name": "npyNoteAccs$ebnf$6$string$1", "symbols": [{"literal":"\ud834"}, {"literal":"\udd2b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "npyNoteAccs$ebnf$6", "symbols": ["npyNoteAccs$ebnf$6", "npyNoteAccs$ebnf$6$string$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "npyNoteAccs", "symbols": ["npyNoteAccs$ebnf$4", "npyNoteAccs$ebnf$5", "npyNoteAccs$ebnf$6"], "postprocess": d => pyInterval(-1, 2*d[0].length + d[1].length + 0.5*d[2].length)},
    {"name": "frcExpr1", "symbols": ["frcExpr1", "_", {"literal":"+"}, "_", "frcExpr2"], "postprocess": d => d[0].add(d[4])},
    {"name": "frcExpr1", "symbols": ["frcExpr1", "_", {"literal":"-"}, "_", "frcExpr2"], "postprocess": d => d[0].sub(d[4])},
    {"name": "frcExpr1", "symbols": ["frcExpr2"], "postprocess": id},
    {"name": "frcExpr2", "symbols": ["frcExpr2", "_", {"literal":"*"}, "_", "frcExpr3"], "postprocess": d => d[0].mul(d[4])},
    {"name": "frcExpr2", "symbols": ["frcExpr2", "_", {"literal":"/"}, "_", "frcExpr3"], "postprocess": d => d[0].div(d[4])},
    {"name": "frcExpr2", "symbols": ["frcExpr3"], "postprocess": id},
    {"name": "frcExpr3", "symbols": [{"literal":"-"}, "_", "frcExpr4"], "postprocess": d => d[2].neg()},
    {"name": "frcExpr3", "symbols": ["frcExpr4"], "postprocess": id},
    {"name": "frcExpr4", "symbols": ["frcExpr5", "_", {"literal":"^"}, "_", "intExpr3"], "postprocess": d => d[0].pow(d[4])},
    {"name": "frcExpr4", "symbols": ["frcExpr5"], "postprocess": id},
    {"name": "frcExpr5", "symbols": ["nonNegInt"], "postprocess": d => Fraction(d[0])},
    {"name": "frcExpr5", "symbols": [{"literal":"("}, "_", "frcExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "intExpr1", "symbols": ["intExpr1", "_", {"literal":"+"}, "_", "intExpr2"], "postprocess": d => d[0] + d[4]},
    {"name": "intExpr1", "symbols": ["intExpr1", "_", {"literal":"-"}, "_", "intExpr2"], "postprocess": d => d[0] - d[4]},
    {"name": "intExpr1", "symbols": ["intExpr2"], "postprocess": id},
    {"name": "intExpr2", "symbols": ["intExpr2", "_", {"literal":"*"}, "_", "intExpr3"], "postprocess": d => d[0] * d[4]},
    {"name": "intExpr2", "symbols": ["intExpr3"], "postprocess": id},
    {"name": "intExpr3", "symbols": [{"literal":"-"}, "_", "intExpr4"], "postprocess": d => - d[2]},
    {"name": "intExpr3", "symbols": ["intExpr4"], "postprocess": id},
    {"name": "intExpr4", "symbols": ["intExpr5", "_", {"literal":"^"}, "_", "posInt"], "postprocess": d => Math.pow(d[0],d[4])},
    {"name": "intExpr4", "symbols": ["intExpr5"], "postprocess": id},
    {"name": "intExpr5", "symbols": ["nonNegInt"], "postprocess": d => parseInt(d[0])},
    {"name": "intExpr5", "symbols": [{"literal":"("}, "_", "intExpr1", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "posInt$ebnf$1", "symbols": []},
    {"name": "posInt$ebnf$1", "symbols": ["posInt$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "posInt", "symbols": [/[1-9]/, "posInt$ebnf$1"], "postprocess": d => d[0] + d[1].join("")},
    {"name": "nonNegInt", "symbols": [{"literal":"0"}], "postprocess": _ => "0"},
    {"name": "nonNegInt", "symbols": ["posInt"], "postprocess": id},
    {"name": "int$ebnf$1", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "int$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "int", "symbols": ["int$ebnf$1", "nonNegInt"], "postprocess": d => (d[0] || "") + d[1]},
    {"name": "decimal$ebnf$1", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "decimal$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "decimal$ebnf$2", "symbols": [/[0-9]/]},
    {"name": "decimal$ebnf$2", "symbols": ["decimal$ebnf$2", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "decimal$ebnf$3$subexpression$1$ebnf$1", "symbols": []},
    {"name": "decimal$ebnf$3$subexpression$1$ebnf$1", "symbols": ["decimal$ebnf$3$subexpression$1$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "decimal$ebnf$3$subexpression$1$ebnf$2$subexpression$1$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "decimal$ebnf$3$subexpression$1$ebnf$2$subexpression$1$ebnf$1", "symbols": ["decimal$ebnf$3$subexpression$1$ebnf$2$subexpression$1$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "decimal$ebnf$3$subexpression$1$ebnf$2$subexpression$1", "symbols": [{"literal":"("}, "decimal$ebnf$3$subexpression$1$ebnf$2$subexpression$1$ebnf$1", {"literal":")"}]},
    {"name": "decimal$ebnf$3$subexpression$1$ebnf$2", "symbols": ["decimal$ebnf$3$subexpression$1$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "decimal$ebnf$3$subexpression$1$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "decimal$ebnf$3$subexpression$1", "symbols": [{"literal":"."}, "decimal$ebnf$3$subexpression$1$ebnf$1", "decimal$ebnf$3$subexpression$1$ebnf$2"]},
    {"name": "decimal$ebnf$3", "symbols": ["decimal$ebnf$3$subexpression$1"], "postprocess": id},
    {"name": "decimal$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "decimal", "symbols": ["decimal$ebnf$1", "decimal$ebnf$2", "decimal$ebnf$3"], "postprocess":  d => (d[0] || "") + d[1].join("")
        + (d[2] ? "." + d[2][1].join("")
                      + (d[2][2] ? "("+d[2][2][1].join("")+")"
                                 : "")
                : "") },
    {"name": "hertz$string$1", "symbols": [{"literal":"h"}, {"literal":"z"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "hertz", "symbols": ["hertz$string$1"]},
    {"name": "hertz$string$2", "symbols": [{"literal":"H"}, {"literal":"z"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "hertz", "symbols": ["hertz$string$2"]}
]
  , ParserStart: "top1"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
